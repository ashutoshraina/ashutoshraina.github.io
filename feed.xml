<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://ashutoshraina.github.io/feed.xml</link><description /><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/05/scriptcs-tools/</guid><link>http://ashutoshraina.github.io/2015/05/scriptcs-tools/</link><title>Scriptcs : The Tooling</title><description>&lt;p&gt;Tools really make the ecosystem more productive. I list down some of the tools that I have found to be useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Version Management&lt;/p&gt;

&lt;p&gt;We can have multiple version of ScriptCS installed on the system. Then to pick which one to use we can use the ScriptCS version Manager &lt;a href="https://github.com/scriptcs-contrib/svm"&gt;SVM&lt;/a&gt;
This is essentially similar to npm and helps keep track of different scriptcs versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running the code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sublime Plugin :
&lt;a href="https://github.com/scriptcs/scriptcs-sublime"&gt;Sublime Plugin&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It is a little dodgy on mac, windows will work just fine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Atom Runner : 
The wiki has a good guide on how to start with Atom and Scriptcs 
&lt;a href="https://github.com/scriptcs/scriptcs/wiki/Running-scripts-in-Atom"&gt;Atom&lt;/a&gt;
I did struggle quite a bit with getting this to work neatly on mac initially things seem to be better now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Omnisharp :
One of the most active and loved .net projects. Omnisharp also has support for ScriptCS.
&lt;a href="https://github.com/OmniSharp/omnisharp-atom"&gt;Omnisharp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a short tour of the tools and hopefully this gets you on your way.&lt;/p&gt;

&lt;p&gt;With this we round up our tour of ScriptCS, it is a great project that continues to make little improvements to my every day workflow.&lt;/p&gt;
</description><pubDate>Wed, 06 May 2015 07:00:00 Z</pubDate><a10:updated>2015-05-06T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Tools really make the ecosystem more productive. I list down some of the tools that I have found to be useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Version Management&lt;/p&gt;

&lt;p&gt;We can have multiple version of ScriptCS installed on the system. Then to pick which one to use we can use the ScriptCS version Manager &lt;a href="https://github.com/scriptcs-contrib/svm"&gt;SVM&lt;/a&gt;
This is essentially similar to npm and helps keep track of different scriptcs versions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running the code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sublime Plugin :
&lt;a href="https://github.com/scriptcs/scriptcs-sublime"&gt;Sublime Plugin&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It is a little dodgy on mac, windows will work just fine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Atom Runner : 
The wiki has a good guide on how to start with Atom and Scriptcs 
&lt;a href="https://github.com/scriptcs/scriptcs/wiki/Running-scripts-in-Atom"&gt;Atom&lt;/a&gt;
I did struggle quite a bit with getting this to work neatly on mac initially things seem to be better now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Omnisharp :
One of the most active and loved .net projects. Omnisharp also has support for ScriptCS.
&lt;a href="https://github.com/OmniSharp/omnisharp-atom"&gt;Omnisharp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a short tour of the tools and hopefully this gets you on your way.&lt;/p&gt;

&lt;p&gt;With this we round up our tour of ScriptCS, it is a great project that continues to make little improvements to my every day workflow.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/05/scriptcs-doing-something-useful/</guid><link>http://ashutoshraina.github.io/2015/05/scriptcs-doing-something-useful/</link><title>Scriptcs : Doing something Useful</title><description>&lt;p&gt;We now have a fair grasp of how to swing with ScriptCS. Let's try and do something more useful with it.&lt;/p&gt;

&lt;p&gt;Let's start by talking to a redis instance. Talking to a running instance interactively is a great a capability to have.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scriptcs -install StackExchange.Redis

using StackExchange.Redis;

var redis = ConnectionMultiplexer.Connect("localhost");
var db = redis.GetDatabase();
db.StringSet("foo","bar");
var result = db.StringGet("foo");
Console.WriteLine(result);
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Tue, 05 May 2015 07:00:00 Z</pubDate><a10:updated>2015-05-05T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;We now have a fair grasp of how to swing with ScriptCS. Let's try and do something more useful with it.&lt;/p&gt;

&lt;p&gt;Let's start by talking to a redis instance. Talking to a running instance interactively is a great a capability to have.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scriptcs -install StackExchange.Redis

using StackExchange.Redis;

var redis = ConnectionMultiplexer.Connect("localhost");
var db = redis.GetDatabase();
db.StringSet("foo","bar");
var result = db.StringGet("foo");
Console.WriteLine(result);
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Github is another important part of out daily workflow. I usually want to look at my notifications on Github when I come in the morning.
With the Ocktokit script-pack we can accomplish a lot of automation. We will make use of a few concepts we have seen in the previous posts.&lt;/p&gt;

&lt;p&gt;First, a simple utility method to print messages in color to the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//ConsoleUtil.csx
void WriteToConsoleWithColor(string message, ConsoleColor color)
{
   var previousColor = Console.ForegroundColor;
   Console.ForegroundColor = color;
   Console.WriteLine(message);
   Console.ForegroundColor = previousColor;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make the scripts interactive we need to take in parameters from the user. Here, we will use the concept of ScriptArgs. 
The arguments passed are available in Env.ScriptArgs and are indexed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//GithubAutomation.csx
#load ConsoleUtil.csx
var octokit = Require&amp;lt;OctokitPack&amp;gt;();

string userName = Env.ScriptArgs[0];
var client = octokit.CreateWithOAuth("GitHubClient", "ashutoshraina", "yourlovelytokengoeshere");

void PrintNotifications(string userName)
{
  var notifications = client.Notification.GetAllForCurrent().Result;
  if(!notifications.Any())
  {
    WriteToConsoleWithColor("Hurray No notifications !!!", ConsoleColor.Green);
  }
  var groupedByRepository = notifications.GroupBy(n =&amp;gt; n.Repository.Name);
  foreach (var groupedNotification in groupedByRepository) {
    WriteToConsoleWithColor(groupedNotification.Key, ConsoleColor.Blue);
    int i = 0;
    foreach (var notification in groupedNotification) {
        WriteToConsoleWithColor(i++ + "--&amp;gt; " + notification.Subject.Title, ConsoleColor.Green);         
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run this script we will need to pass in the username parameter. This can be done as shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scriptcs .\CLIAutomation.csx -- ashutoshraina
Hurray No notifications !!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully, the idea that ScriptCS can form part of your daily developer workflow is starting to set in. We can easily extend this print our release notes and then hook that script up to the CI.&lt;/p&gt;

&lt;p&gt;Interactively doing automation using selnium is difficult since we have to go figure out which selectors etc..to click.
With ScriptCS and FluentAutomation scriptpack we can do this from the REPL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using FluentAutomation;
var test = new FluentTest();
SeleniumWebDriver.Bootstrap(SeleniumWebDriver.Browser.Chrome);

var I = test.I;

I.Open("http://somewebsite.com.com");
I.Click(".header__menu&amp;gt;.menu-item&amp;gt;.menu-item__link");
I.Click(".section-links .grid__cell a");

//Running this is going to open your browser and start the automation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can attach yourself to a process and diagnose what is going on. This is powered by ClrMd ScriptPack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var clrmd = Require&amp;lt;ClrMdPack&amp;gt;();
var clrRuntime = clrmd.Attach(2772);
clrmd.DumpHeapStatsByType();
clrmd.Detach();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ScriptCS being extensible has good abstraction written on top of it. One such is the ConfigR project. 
It allows us to get rid of XML based config files and use pure C# instead to write configuration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a New Console Project and the ConfigR Nuget package. Let's call it &lt;strong&gt;* ConfigRDemo *&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create a File called ConfigRDemo.exe.csx    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let't load the exe in the script file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r "ConfigRDemo.exe"    
using ConfigRDemo;

//We can simply start adding the config values like this.
Add("Name", "ChristosMatskas");  
Add("Age", 25);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How, do we consume these values ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = Config.Global.Get&amp;lt;string&amp;gt;("Name");
var age = Config.Global.Get&amp;lt;int&amp;gt;("Age");

Notice, how the casting went away and we started to have real types.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now simply have custom configuration as well. In your code create a class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public class MyCustomConfigurationStyle
{
    public int Id { get; set; }
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the csx file then it is simply a matter of putting it in the config.&lt;br /&gt;
    var config = new MyCustomConfigurationStyle{Id = 1, Name = "Awesome"};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Add("config",config);
var config = Config.Global.Get&amp;lt;MyCustomConfigurationStyle&amp;gt;("config");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loading it is just the same.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = Config.Global.Get&amp;lt;MyCustomConfigurationStyle&amp;gt;("config");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can continue to leverage the full capabilities of the language like call methods, load another configuration from the network..make async await calls and do strange things after that.    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 5;
var y = x * 5;

void AwesomeMethod()
{
    x = 50 * x ;
}
AwesomeMethod();

Add("x",x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That really does bring a lot of C# into our config files.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/05/scriptcs-better-abstractions/</guid><link>http://ashutoshraina.github.io/2015/05/scriptcs-better-abstractions/</link><title>Scriptcs : Better Abstraction</title><description>&lt;p&gt;Abstractions are what drive most of software development. 
ScriptCS also has a few abstractions which bridge the gap between the existing frameworks and the notion of scripting and REPL.&lt;/p&gt;

&lt;p&gt;From the github wiki&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Script Packs allow you to bootstrap the environment for new scripts, 
  further reducing the amount of code necessary to take advantage of your favorite C# frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

</description><pubDate>Mon, 04 May 2015 07:00:00 Z</pubDate><a10:updated>2015-05-04T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Abstractions are what drive most of software development. 
ScriptCS also has a few abstractions which bridge the gap between the existing frameworks and the notion of scripting and REPL.&lt;/p&gt;

&lt;p&gt;From the github wiki&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Script Packs allow you to bootstrap the environment for new scripts, 
  further reducing the amount of code necessary to take advantage of your favorite C# frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Script Packs get rid of the boiler plate code which is required to get up and running with a framework. For e.g. Web Api requires a lot assembly references and using statements just to get going.
That may be fine in VS but in the REPL that becomes a serious overhead.&lt;/p&gt;

&lt;p&gt;To see what kind of effect do script packs have we need to see them in action. We will look at the NancyScript Pack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scriptcs install ScriptCs.Nancy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ScriptCS provides the Require construct to load the script pack. We can have more than one as well. The basic code then just boild down to &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var r = Require&amp;lt;NancyPack&amp;gt;();

public class IndexModule : NancyModule
{
    public IndexModule()
    {
        Get["/"] = _ =&amp;gt; "Hello World";
        Get["/view"] = _ =&amp;gt; View["index"];//put a index.html in the same directory and it will be served
    }
}

r.Host();

Running it is scriptcs ./Server.csx

Searching assembly: Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null 
Searching assembly: R*109eaf48-8359-4ded-b57a-d3c89575f24a-#1UD, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null

Searching assembly: WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
Found Nancy module: Submission#0+IndexModule
Hosting Nancy at: http://localhost:8888/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did we gain ? We got rid of the usings, the code required to spin up the process and host. We could purely focus and our code.&lt;/p&gt;

&lt;p&gt;Most of the frameworks do not have the notion of in-memory compilation that Roslyn supports and hence these script packs are needed.&lt;/p&gt;

&lt;p&gt;Similarly, for Web API as well we can do the following (from the Github Wiki).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Dynamic;

public class TestController : ApiController
{
    public dynamic Get() 
    {
        dynamic obj = new ExpandoObject();
        obj.message = "Hello from Web Api";
        return obj;
    }
}

var webapi = Require&amp;lt;WebApi&amp;gt;();

var server = webapi.
    Configure(typeof(TestController)).
    UseJsonOnly().
    Start("http://localhost:8080");

Console.WriteLine("Listening...");
Console.ReadLine();
server.Dispose();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we will look at using Scripts to start doing something useful.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/05/scriptcs-becoming-productive/</guid><link>http://ashutoshraina.github.io/2015/05/scriptcs-becoming-productive/</link><title>Scriptcs : Becoming Productive</title><description>&lt;p&gt;Last time we got up and running with Scriptcs. We have done everything in the REPL so far.
When it comes to scripts we need a few more things to make everything easy.&lt;/p&gt;

&lt;p&gt;Roslyn allows us to load assemblies using the #r directive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r System.Data
#r System.Net.Http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Roslyn does not give us the power to load multiple script files. Scriptcs helps us out here by giving the #load directive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HelloWorld.csx

Console.WriteLine("Hello World");

MyWorld.csx

#load HelloWorld.csx
Console.WriteLine("MyWorld");

//output 
Hello World
MyWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loading of scriptcs is recursive and the script that gets loaded first gets executed first. 
Scriptcs also ensures that only one version of the script is loaded at a time (e.g. File1 loads File2 &amp;amp; File3 and File2 also loads File3).&lt;/p&gt;

&lt;p&gt;</description><pubDate>Sun, 03 May 2015 07:00:00 Z</pubDate><a10:updated>2015-05-03T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Last time we got up and running with Scriptcs. We have done everything in the REPL so far.
When it comes to scripts we need a few more things to make everything easy.&lt;/p&gt;

&lt;p&gt;Roslyn allows us to load assemblies using the #r directive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r System.Data
#r System.Net.Http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Roslyn does not give us the power to load multiple script files. Scriptcs helps us out here by giving the #load directive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HelloWorld.csx

Console.WriteLine("Hello World");

MyWorld.csx

#load HelloWorld.csx
Console.WriteLine("MyWorld");

//output 
Hello World
MyWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loading of scriptcs is recursive and the script that gets loaded first gets executed first. 
Scriptcs also ensures that only one version of the script is loaded at a time (e.g. File1 loads File2 &amp;amp; File3 and File2 also loads File3).&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;
In .net things would be incomplete without Nuget support. Scriptcs allows us to include any package available on Nuget as we want.
Scriptcs relies on the nuget Api and not the nuget.exe to do it's job. It covers quite a few scenarios easily.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do I add a Nuget package ?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;scriptcs install YourPackage&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scriptcs will create a scriptcs_packages.config in the directory. It will also make the dll available instantly in the app domain.
Adding the required usings to start using the package is upto us. What this also means is that scripts become reusable by default.
Put the script and the packages.config on Github and everyone can use it.&lt;/p&gt;

&lt;p&gt;Show me the code &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scriptcs install CsvHelper
/*
create a Data.csv like below
Subject,Predicate,Object
ScriptCS,is,useful
I,am,awesome

Inside Demo.csx
*/
using CsvHelper;
using System.IO;

var reader = new StreamReader("Data.csv");
var csvReader = new CsvReader(reader);
var records = csvReader.GetRecords&amp;lt;Sentence&amp;gt;();

foreach (var record in records) {
    Console.WriteLine(record);
}

class Sentence
{
    public string Subject { get; set; }
    public string Predicate { get; set; }
    public string Object { get; set; }

    public override string ToString()
    {
        return Subject + " ..." + Predicate + "..." + Object;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;How do i use a pcakges.config that I have from an existing project ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just copy and drop it with the scripts and ScriptCS will honour that. 
If the pckages aren't present in the directory it will go ahead and restore them.&lt;/p&gt;

&lt;p&gt;Next, we look at ScriptPacks and how they make life easier.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/05/scriptcs-up-and-running/</guid><link>http://ashutoshraina.github.io/2015/05/scriptcs-up-and-running/</link><title>Scriptcs : Up &amp; Running</title><description>&lt;p&gt;Last time we saw how we could get Scriptcs up and running. Before we go further, it would be nice to know what is going on.&lt;/p&gt;

&lt;p&gt;Roslyn enabled in-memory compilation which means we can finally take loose C# code and start running with it. 
In code terms it means we can get rid of 
    class Program 
        public static void ....  &lt;/p&gt;

&lt;p&gt;We can valid C# statements and then move on to doing the real thing. &lt;/p&gt;

</description><pubDate>Sat, 02 May 2015 07:00:00 Z</pubDate><a10:updated>2015-05-02T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Last time we saw how we could get Scriptcs up and running. Before we go further, it would be nice to know what is going on.&lt;/p&gt;

&lt;p&gt;Roslyn enabled in-memory compilation which means we can finally take loose C# code and start running with it. 
In code terms it means we can get rid of 
    class Program 
        public static void ....  &lt;/p&gt;

&lt;p&gt;We can valid C# statements and then move on to doing the real thing. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The code will get wrapped in a class and then get called.
Since inner classes can't have namespaces we also don't get to use namespaces in scriptcs (not yet, but this restriction is likely to go away.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; scriptcs
scriptcs (ctrl-c to exit or :help for help)
&amp;gt; :help
The following commands are available in the REPL:
:alias          Allows you to alias a command with a custom name
:cd             Changes the working directory to the path provided.
:clear          Clears the console window.
:cwd            Displays the current working directory.
:exit           Exits the REPL
:help           Shows this help.
:install        Installs a Nuget package. I.e. :install &amp;lt;package&amp;gt; &amp;lt;version&amp;gt;
:references     Displays a list of assemblies referenced from the REPL context.
:reset          Resets the REPL state. All local variables and member definitions are cleared.
:usings         Displays a list of namespaces imported into REPL context.
:vars           Displays a list of variables defined within the REPL, along with their types and values.
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scriptcs will by default load certain assemblies by default, we can check that out using :references. 
:usings will give us the currently loaded namespaces.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; :references
[
  "System",
  "System.Core",
  "System.Data",
  "System.Data.DataSetExtensions",
  "System.Xml",
  "System.Xml.Linq",
  "System.Net.Http",
  "/usr/local/Cellar/scriptcs/0.14.1/libexec/ScriptCs.Core.dll",
  "/usr/local/Cellar/scriptcs/0.14.1/libexec/ScriptCs.Contracts.dll"
]
&amp;gt;

&amp;gt; :usings
[
  "System",
  "System.Collections.Generic",
  "System.Linq",
  "System.Text",
  "System.Threading.Tasks",
  "System.IO",
  "System.Net.Http"
]
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now get on with the job of playing with the REPL. Let's declare a few variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; :clear
&amp;gt; var x = 42;
&amp;gt; var y =x ;
&amp;gt; Console.WriteLine(x); 
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now look at the :vars and see what got stored.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; :vars
[
  "int x = 42",
  "int y = 42"
]
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we become a bit more productive by using the full power of the .net ecosystem.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/05/scriptcs-getting-started/</guid><link>http://ashutoshraina.github.io/2015/05/scriptcs-getting-started/</link><title>Scriptcs : Getting Started</title><description>&lt;p&gt;C# even though a really nice language has always been tied to Visual Studio. 
With mono we had the ability to write it on non-windows platforms as well. 
One other thing that mono had was the repl and the ability to script. &lt;/p&gt;

&lt;p&gt;What is Scriptcs ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use C# as a scripting language powered by Roslyn&lt;/li&gt;
&lt;li&gt;Uses the Rosyln nuget package&lt;/li&gt;
&lt;li&gt;No IDE, No dlls&lt;/li&gt;
&lt;li&gt;Xplat, CLI&lt;/li&gt;
&lt;li&gt;Lighter experience with faster feedback&lt;/li&gt;
&lt;/ul&gt;

</description><pubDate>Fri, 01 May 2015 07:00:00 Z</pubDate><a10:updated>2015-05-01T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;C# even though a really nice language has always been tied to Visual Studio. 
With mono we had the ability to write it on non-windows platforms as well. 
One other thing that mono had was the repl and the ability to script. &lt;/p&gt;

&lt;p&gt;What is Scriptcs ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use C# as a scripting language powered by Roslyn&lt;/li&gt;
&lt;li&gt;Uses the Rosyln nuget package&lt;/li&gt;
&lt;li&gt;No IDE, No dlls&lt;/li&gt;
&lt;li&gt;Xplat, CLI&lt;/li&gt;
&lt;li&gt;Lighter experience with faster feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;How many times have we done this ?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/VSFlow.gif" alt="HelloWorld" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything is still typed and you get to try things out iteratively without using VS.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Roslyn is available as nuget package which means that we can get in there and do useful things with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Source, XPlat ...things that make us believe that it is going to solve a lot of problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Really nice CLI experience and what more there is a REPL there as well.&lt;/li&gt;
&lt;li&gt;Significantly lighter experience which is a welcome change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;ScriptCS on Windows is easy to get started using Chocolatey.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cinst scriptcs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Mac, Homebrew is the simplest way to go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install scriptcs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will interchangeably use mac and windows, but the things should be the same (leaving out the differences in runtime between mono and .net).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scriptcs
scriptcs (ctrl-c to exit or :help for help)

&amp;gt; Console.WriteLine("Hello World");
Hello World
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's a good start, we are able to write Hello World without doing the File -&gt; New Project dance.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/01/windows-productivity-contd/</guid><link>http://ashutoshraina.github.io/2015/01/windows-productivity-contd/</link><title>Everyday utilities for a Windows developer - Contd.</title><description>&lt;p&gt;From the previous post if you do end up using &lt;a href="http://bliker.github.io/cmder/" title="Cmder Mini"&gt;cmder mini&lt;/a&gt; like me then you should also register it and let it show up in the explorer. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cmder.exe /REGISTER ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time we look at some utility programs that are often required when doing deeper analysis in a windows environment.&lt;/p&gt;

</description><pubDate>Mon, 12 Jan 2015 08:00:00 Z</pubDate><a10:updated>2015-01-12T08:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;From the previous post if you do end up using &lt;a href="http://bliker.github.io/cmder/" title="Cmder Mini"&gt;cmder mini&lt;/a&gt; like me then you should also register it and let it show up in the explorer. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cmder.exe /REGISTER ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time we look at some utility programs that are often required when doing deeper analysis in a windows environment.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Process Explorer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I consider it to be an advanced version of Task Manager. Whenever I want to see what the process is doing or kill it for whatever reason this is my go to program. Infact, it does give you the option of replacing the Task Manager with Process Explorer. I have used this in the past to identify which process has held onto my file especially when I want to delete it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Process Monitor&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Process Monitor on the other hand, is a different tool altogether. It gives you the ability to see how the Read/Write is happening, and whether the operations succeeded or not. The ability to see these lower level operations is priceless.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;8:45:38.6874836 PM  chrome.exe  5992    TCP Receive ARThinkpad:57642 -&amp;gt; a23-211-203-17.deploy.static.akamaitechnologies.com:http    SUCCESS Length: 1442, seqnum: 0, connid: 0
8:45:38.6876860 PM  chrome.exe  5992    TCP Disconnect  ARThinkpad:57689 -&amp;gt; ec2-54-169-42-120.ap-southeast-1.compute.amazonaws.com:http SUCCESS Length: 0, seqnum: 0, connid: 0
8:45:38.6887398 PM  chrome.exe  5992    TCP Disconnect  ARThinkpad:57671 -&amp;gt; 119.81.205.68-static.reverse.softlayer.com:http SUCCESS Length: 0, seqnum: 0, connid: 0
8:45:38.7076694 PM  chrome.exe  5992    TCP Receive ARThinkpad:57642 -&amp;gt; a23-211-203-17.deploy.static.akamaitechnologies.com:http    SUCCESS Length: 1442, seqnum: 0, connid: 0
8:45:38.7081062 PM  chrome.exe  5992    TCP Disconnect  ARThinkpad:57682 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tcp View&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another very nice utility that you can use to see what is happening under the hood. I once used it to triage high network utilisation on the database server, due to a runaway query. Being able to narrow down communication between two hosts is important and this tool is just the right fit. Also, when you are working with tunnels (as I have done in the past) then it pays to know what your tcp connections are upto.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mqsvc.exe   2872    TCPV6   arthinkpad  2107    arthinkpad  0   LISTENING                                       
mqsvc.exe   2872    TCPV6   arthinkpad  49158   arthinkpad  0   LISTENING                                       
QuickControlService.exe 12808   TCP ARThinkpad  5365    ARThinkpad  0   LISTENING                                       
services.exe    780 TCP ARThinkpad  49160   ARThinkpad  0   LISTENING                                       
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Debug View&lt;/strong&gt;
How this has saved my life !! Read debug logs like an ancient boss. Life saver when working with ancient systems which don't do centralised logging.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from these, one more utility that I have recently added is Wox. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Wox&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://ashutoshraina.github.io/"https://www.getwox.com/",Wox"&gt;Wox&lt;/a&gt; is Alfred/Spotlight for Windows only a so much better than launchy. It has themes, it has plugins and is free. May be we should call it Batman!!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/wox.png" alt="Wox" /&gt;&lt;/p&gt;

&lt;p&gt;Writing plugins is simple, and look they even have a documentation page.
&lt;a href="http://ashutoshraina.github.io/"http://doc.getwox.com/en/plugin/csharp_plugin.html",Docs"&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Switcheroo&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, so this is something that I have added only in the last few days. Switcheroo provides IDE like experience when switching between tabs on windows. The project is also a good example of how to interact with WMI.
As is now the tradition with almost everything on windows, it is available through chocolatey (which will be the topic of my next few posts).&lt;/p&gt;

&lt;p&gt;Note : Only install the latest version of switcheroo, the older versions crashed with .net 4.5.3.&lt;/p&gt;

&lt;p&gt;Switcheroo is available &lt;a href="http://ashutoshraina.github.io/"http://www.switcheroo.io/",here"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Extended fun : Wox has a switcheroo &lt;a href="http://ashutoshraina.github.io/"https://github.com/orzFly/Wox.Plugin.Switcheroo",plugin"&gt;plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this does help you as it as helped me improve my workflow.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/01/becoming-a-little-more-productive-on-windows/</guid><link>http://ashutoshraina.github.io/2015/01/becoming-a-little-more-productive-on-windows/</link><title>Everyday utilities for a Windows developer</title><description>&lt;p&gt;As I have learned to use the command line more and more on windows I often get stuck due to lack of commands. This can be quite frustrating and if you switch between the *nix and windows then the gap can seem to quite alarming. In this post I will share some tidbits on how to overcome some of these pains. &lt;/p&gt;

&lt;p&gt;First, do yourself and get a better console like Console2 or Mini Commander(or anything else that suits your style). Things are a bit better in Windows 10 (copy paste will be allowed on the command line) but that is still sometime away. If you are willing then I do suggest making the permanent shift to Powershell for all practical purposes, I don't see the windows command line (CMD) ever improving enough to make it my default console. Next, I describe some of the common things I do all the time.&lt;/p&gt;

</description><pubDate>Mon, 05 Jan 2015 08:00:00 Z</pubDate><a10:updated>2015-01-05T08:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;As I have learned to use the command line more and more on windows I often get stuck due to lack of commands. This can be quite frustrating and if you switch between the *nix and windows then the gap can seem to quite alarming. In this post I will share some tidbits on how to overcome some of these pains. &lt;/p&gt;

&lt;p&gt;First, do yourself and get a better console like Console2 or Mini Commander(or anything else that suits your style). Things are a bit better in Windows 10 (copy paste will be allowed on the command line) but that is still sometime away. If you are willing then I do suggest making the permanent shift to Powershell for all practical purposes, I don't see the windows command line (CMD) ever improving enough to make it my default console. Next, I describe some of the common things I do all the time.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get CLS to works as well as CLEAR as well Ctrl + L&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you got a decent console and it comes with these things. This does help make the switch between *nix and windows slightly less painful.&lt;/p&gt;

&lt;p&gt;For everything below we need Sysinternal Tools. It is a powerful set of tools that provides the missing functionality that developes usually get by default in other worlds. When you do use some if these for the first time then you will be asked to accept a license (swallow the pill and move on !!).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View Traces or Logs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DbgView.exe will help you do this. I have used this in the past in production when one of the servers decides to play funny and you can live stream the logs here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dump Event Logs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PsLogList dumps event logs on a local or remote NT system.
You can filter the dump by event, for the last n minutes or n days ..Lots of options and very handy in production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mutliple Desktops&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is it even possible that Microsoft forgot to ship this by default? Desktops.exe allows you have mutliple desktops on windows and have hotkeys for them. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/MultipleDesktops.png" alt="Multiple Desktops" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dlls loaded by a Process&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see what Sublime Text has to offer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Listdlls.exe Sublime Text&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sublime_text.exe pid: 9984
Command line: "C:\Program Files\Sublime Text 3\sublime_text.exe"
Base                Size      Path
0x00000000a0f80000  0x556000  C:\Program Files\Sublime Text 3\sublime_text.exe
0x000000004cd60000  0x1a6000  C:\WINDOWS\SYSTEM32\ntdll.dll
0x000000004c860000  0x13a000  C:\WINDOWS\system32\KERNEL32.DLL
0x000000004a1d0000  0x10f000  C:\WINDOWS\system32\KERNELBASE.dll
0x000000004cbe0000  0x171000  C:\WINDOWS\system32\USER32.dll
0x000000004ada0000  0x144000  C:\WINDOWS\system32\GDI32.dll
0x000000004c7b0000  0xa5000   C:\WINDOWS\system32\ADVAPI32.dll
0x000000004b330000  0x140f000  C:\WINDOWS\system32\SHELL32.dll
0x000000004af10000  0x178000  C:\WINDOWS\system32\ole32.dll


There were a gazillion more (including MS office dlls !!) 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RunAs&lt;/strong&gt; a different User&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes it is necessary to run a software as a different user (e.g. trying to connect to a database server as a sys account).&lt;/p&gt;

&lt;p&gt;The ShellRunas utility allows us to register this feature in the context menu of programs. You can ofcourse run the program as a different program from the command line as well. You can register it using the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Ashutosh\Tools\SysInternals
λ ShellRunas.exe /reg 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once done, you can light up this feature using Shift + Right Click on any program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zoom&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another handy utility ZoomIt allows you to zoom in on fly using hotkeys (Ctrl+4 should do it). It is awesome during presentation since you don't have to permanently increase your font. Minimize this to tray and stay happy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CtrlToCap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ofcourse we need this. Permanently disabling CAPS Lock is needed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ctrl2cap.exe /reg 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the true widows traditon a boot later you are golden.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Getting File Handles&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handles.exe tells you who is holdiong on to which file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View All the Processes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Option 1 : Curse your existence and go to Task Manager&lt;/p&gt;

&lt;p&gt;Option 2 : Use PsList.exe&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Ashutosh\Tools\SysInternals                                        
λ pslist.exe                                                          

Process information for ARTHINKPAD:                            


Name         Pid Pri Thd  Hnd   Priv        CPU Time    Elapsed Time 
Idle           0   0   4    0      0     0:40:49.468     0:00:00.000 
System         4   8 189 1562    116     0:00:27.531     0:11:19.227 
smss         416  11   2   44    308     0:00:00.203     0:11:19.117 
csrss        660  13  10  627   1896     0:00:00.656     0:11:07.766 
wininit      724  13   1   75    772     0:00:00.203     0:11:06.762 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kill a Process&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Option 1 : Go the task manager and do it.&lt;/p&gt;

&lt;p&gt;Option 2 : Use PsKill.exe &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Ashutosh\Tools\SysInternals
λ pskill.exe chrome
8 processes named chrome killed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also kill a process running on another machine, so quite useful when you want to tame a runaway process in production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shutdown&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all this works the computer needs to rest so let's shut it down.&lt;/p&gt;

&lt;p&gt;psshutdown.exe&lt;/p&gt;

&lt;p&gt;Now, before you really go shutdown everything, put the sysinternal in your path. Next time we will go look for a few other utilities that make life as a developer much easier from the point of view of debugging.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/09/implicit-and-explicit-in-csharp/</guid><link>http://ashutoshraina.github.io/2014/09/implicit-and-explicit-in-csharp/</link><title>Implicit and Explicit Operator in C#</title><description>&lt;p&gt;One of the features that I have never used in C# is the implicit and Explicit keywords. &lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on explicit is "The explicit keyword declares a user-defined type conversion operator that must be invoked with a cast." Omitting the cast will result in a compile time warning.&lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on implicit is "The implicit keyword is used to declare an implicit user-defined type conversion operator." Implicit doesn't require an explicit cast and makes the syntax a lot easier.&lt;/p&gt;

</description><pubDate>Fri, 12 Sep 2014 07:00:00 Z</pubDate><a10:updated>2014-09-12T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One of the features that I have never used in C# is the implicit and Explicit keywords. &lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on explicit is "The explicit keyword declares a user-defined type conversion operator that must be invoked with a cast." Omitting the cast will result in a compile time warning.&lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on implicit is "The implicit keyword is used to declare an implicit user-defined type conversion operator." Implicit doesn't require an explicit cast and makes the syntax a lot easier.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{
    public static void Main()
    {

    Email test = "alice@test.com";
    System.Console.WriteLine("Test: " + test);        
    }
}

class Email
    {
        private string user;
        private string domain;
        public Email(string user, string domain)
        {
            this.user = user;
            this.domain = domain;
        }
        static public implicit operator Email(string value)
        {
            var parts = value.Split('@');
            if (parts.Length != 2)
                return null;
            return new Email(parts[0], parts[1]);
        }
        static public implicit operator string(Email value)
        {
            return "User = " + value.user + ", Domain = " + value.domain;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it would quite useful in providing conversion operations from one type to another. The simplest candidate would when you have multiple addresses and you need them in a certain format (read Type) to send it to a shipping agency.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/08/ndepend-review/</guid><link>http://ashutoshraina.github.io/2014/08/ndepend-review/</link><title>NDepend Review</title><description>&lt;p&gt;Patrick from NDepend wasgracious enough to give me a license for NDepend. I have been wanting to get my hands on such a tool for some time now, and as it turns NDepend is actually quite good. Let's have a look at what the hell am I a talking about.
</description><pubDate>Mon, 25 Aug 2014 07:00:00 Z</pubDate><a10:updated>2014-08-25T07:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Patrick from NDepend wasgracious enough to give me a license for NDepend. I have been wanting to get my hands on such a tool for some time now, and as it turns NDepend is actually quite good. Let's have a look at what the hell am I a talking about.
&lt;!--excerpt--&gt;
&lt;a href="http://www.ndepend.com/" title="NDepend"&gt;NDepend&lt;/a&gt; is a tool which allows you to maintain code quality in a continuous way. I must state &lt;em&gt;continuous&lt;/em&gt; with some degree of importance since that is what drives quality over a sustained period of time. The set up is fairly simple. You can download it and then install the VS plugin or use it as a stand alone tool. Let's go with the VS plugin for now. To ensure that I wasn't just checking out a demo application, I decided to pull down some medium and large open source projects and then run them through the grind.
First, &lt;a href="http://ashutoshraina.github.io/"https://github.com/Sandra/Sandra.Snow"," title="Sandra.Snow"&gt;Snow&lt;/a&gt;(since this blog runs on Snow). The menu offers a way of creating a new NDepend project and attach it to the existing solution. We will attach to just Snow for now(leave out the other for the sake of simplicity).&lt;/p&gt;

&lt;p&gt;Photo Goes here
&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/GettingStarted.png" alt="Getting Started" /&gt;&lt;/p&gt;

&lt;p&gt;Once we are finished analysing the assemblies. We get a summary of the application level metrics like this. This is quite useful, especially once we establish the baseline.&lt;/p&gt;

&lt;p&gt;Application Metrics
&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/ApplicationMetrics.png" alt="Application Metrics" /&gt;&lt;/p&gt;

&lt;p&gt;Now, dow nto serious business. We are told that we are in violation of some rules (we haven't changed the default settings). NDepend comes with a default set of rules which are largely good and move us towards the general pit of happiness. Rules include best practices for OO design, framework usage guidelines and there are even rules on immutability. So, let's see what did we get.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;warning     Avoid public methods not publicly visible 37  methods Visibility
warning     Fields should be declared as private 1 fields  Visibility
warning     Fields that could have a lower visibility 1 fields  Visibility
.....
Many more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm..these look good. Let's dig deeper.&lt;/p&gt;

&lt;p&gt;The dependency graph is also a nice insight.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/DependencyGraph.png" alt="Dependency Graph" /&gt;&lt;/p&gt;

&lt;p&gt;Snow is a medium sized code base so the analysis is quite good and accurate as well.&lt;/p&gt;

&lt;p&gt;Will I use NDepend ? Probably Yes
I won't run it without configuring the rules according to my taste (naming static fields with s_ is a little bit of an overkill). It is very easy to change these rules so that's not too tough.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/ManagingRules.png" alt="Managing Rules" /&gt;&lt;/p&gt;

&lt;p&gt;I will probably not keep it running all the time, (combined with ReSharper VS becomes a little slow). The dashboard gives you a clean and clear overview of the entire process which is ofcours nice, since you don't have to load the addin into VS.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/NDependDashboard.png" alt="Dashboard" /&gt;&lt;/p&gt;

&lt;p&gt;Also, I don't think it makes much sense to run at every check-in. In your CI process you are better of making this a nightly thing, and view the results in the morning. Watchout for the .gitignore files though, they might need some updating.&lt;/p&gt;

&lt;p&gt;Note : 
The review is entirely my own and not influenced by anyone.&lt;/p&gt;

&lt;p&gt;P.S. Why is everything uppercase by default in the Dashboard Menu ? (I thought the VS fiasco was enough)&lt;/p&gt;
</a10:content></item></channel></rss>