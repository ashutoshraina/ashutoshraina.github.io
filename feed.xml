<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://ashutoshraina.github.io/feed.xml</link><description /><item><guid isPermaLink="true">http://ashutoshraina.github.io/2015/01/becoming-a-little-more-productive-on-windows/</guid><link>http://ashutoshraina.github.io/2015/01/becoming-a-little-more-productive-on-windows/</link><title>Everyday utilities for a Windows developer</title><description>&lt;p&gt;As I have learned to use the command line more and more on windows I often get stuck due to lack of commands. This can be quite frustrating and if you switch between the *nix and windows then the gap can seem to quite alarming. In this post I will share some tidbits on how to overcome some of these pains. &lt;/p&gt;

&lt;p&gt;First, do yourself and get a better console like Console2 or Mini Commander(or anything else that suits your style). Things are a bit better in Windows 10 (copy paste will be allowed on the command line) but that is still sometime away. If you are willing then I do suggest making the permanent shift to Powershell for all practical purposes, I don't see the windows command line (CMD) ever improving enough to make it my default console. Next, I describe some of the common things I do all the time.&lt;/p&gt;

</description><pubDate>Sun, 04 Jan 2015 18:30:00 Z</pubDate><a10:updated>2015-01-04T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;As I have learned to use the command line more and more on windows I often get stuck due to lack of commands. This can be quite frustrating and if you switch between the *nix and windows then the gap can seem to quite alarming. In this post I will share some tidbits on how to overcome some of these pains. &lt;/p&gt;

&lt;p&gt;First, do yourself and get a better console like Console2 or Mini Commander(or anything else that suits your style). Things are a bit better in Windows 10 (copy paste will be allowed on the command line) but that is still sometime away. If you are willing then I do suggest making the permanent shift to Powershell for all practical purposes, I don't see the windows command line (CMD) ever improving enough to make it my default console. Next, I describe some of the common things I do all the time.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get CLS to works as well as CLEAR as well Ctrl + L&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you got a decent console and it comes with these things. This does help make the switch between *nix and windows slightly less painful.&lt;/p&gt;

&lt;p&gt;For everything below we need Sysinternal Tools. It is a powerful set of tools that provides the missing functionality that developes usually get by default in other worlds. When you do use some if these for the first time then you will be asked to accept a license (swallow the pill and move on !!).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View Traces or Logs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DbgView.exe will help you do this. I have used this in the past in production when one of the servers decides to play funny and you can live stream the logs here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dump Event Logs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PsLogList dumps event logs on a local or remote NT system.
You can filter the dump by event, for the last n minutes or n days ..Lots of options and very handy in production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mutliple Desktops&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is it even possible that Microsoft forgot to ship this by default? Desktops.exe allows you have mutliple desktops on windows and have hotkeys for them. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/MultipleDesktops.png" alt="Multiple Desktops" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dlls loaded by a Process&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see what Sublime Text has to offer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Listdlls.exe Sublime Text&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sublime_text.exe pid: 9984
Command line: "C:\Program Files\Sublime Text 3\sublime_text.exe"
Base                Size      Path
0x00000000a0f80000  0x556000  C:\Program Files\Sublime Text 3\sublime_text.exe
0x000000004cd60000  0x1a6000  C:\WINDOWS\SYSTEM32\ntdll.dll
0x000000004c860000  0x13a000  C:\WINDOWS\system32\KERNEL32.DLL
0x000000004a1d0000  0x10f000  C:\WINDOWS\system32\KERNELBASE.dll
0x000000004cbe0000  0x171000  C:\WINDOWS\system32\USER32.dll
0x000000004ada0000  0x144000  C:\WINDOWS\system32\GDI32.dll
0x000000004c7b0000  0xa5000   C:\WINDOWS\system32\ADVAPI32.dll
0x000000004b330000  0x140f000  C:\WINDOWS\system32\SHELL32.dll
0x000000004af10000  0x178000  C:\WINDOWS\system32\ole32.dll


There were a gazillion more (including MS office dlls !!) 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RunAs&lt;/strong&gt; a different User&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes it is necessary to run a software as a different user (e.g. trying to connect to a database server as a sys account).&lt;/p&gt;

&lt;p&gt;The ShellRunas utility allows us to register this feature in the context menu of programs. You can ofcourse run the program as a different program from the command line as well. You can register it using the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Ashutosh\Tools\SysInternals
λ ShellRunas.exe /reg 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once done, you can light up this feature using Shift + Right Click on any program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zoom&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another handy utility ZoomIt allows you to zoom in on fly using hotkeys (Ctrl+4 should do it). It is awesome during presentation since you don't have to permanently increase your font. Minimize this to tray and stay happy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CtrlToCap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ofcourse we need this. Permanently disabling CAPS Lock is needed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ctrl2cap.exe /reg 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the true widows traditon a boot later you are golden.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Getting File Handles&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handles.exe tells you who is holdiong on to which file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View All the Processes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Option 1 : Curse your existence and go to Task Manager&lt;/p&gt;

&lt;p&gt;Option 2 : Use PsList.exe&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Ashutosh\Tools\SysInternals                                        
λ pslist.exe                                                          

Process information for ARTHINKPAD:                            


Name         Pid Pri Thd  Hnd   Priv        CPU Time    Elapsed Time 
Idle           0   0   4    0      0     0:40:49.468     0:00:00.000 
System         4   8 189 1562    116     0:00:27.531     0:11:19.227 
smss         416  11   2   44    308     0:00:00.203     0:11:19.117 
csrss        660  13  10  627   1896     0:00:00.656     0:11:07.766 
wininit      724  13   1   75    772     0:00:00.203     0:11:06.762 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kill a Process&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Option 1 : Go the task manager and do it.&lt;/p&gt;

&lt;p&gt;Option 2 : Use PsKill.exe &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Ashutosh\Tools\SysInternals
λ pskill.exe chrome
8 processes named chrome killed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also kill a process running on another machine, so quite useful when you want to tame a runaway process in production.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shutdown&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all this works the computer needs to rest so let's shut it down.&lt;/p&gt;

&lt;p&gt;psshutdown.exe&lt;/p&gt;

&lt;p&gt;Now, before you really go shutdown everything, put the sysinternal in your path. Next time we will go look for a few other utilities that make life as a developer much easier from the point of view of debugging.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/09/implicit-and-explicit-in-csharp/</guid><link>http://ashutoshraina.github.io/2014/09/implicit-and-explicit-in-csharp/</link><title>Implicit and Explicit Operator in C#</title><description>&lt;p&gt;One of the features that I have never used in C# is the implicit and Explicit keywords. &lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on explicit is "The explicit keyword declares a user-defined type conversion operator that must be invoked with a cast." Omitting the cast will result in a compile time warning.&lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on implicit is "The implicit keyword is used to declare an implicit user-defined type conversion operator." Implicit doesn't require an explicit cast and makes the syntax a lot easier.&lt;/p&gt;

</description><pubDate>Thu, 11 Sep 2014 18:30:00 Z</pubDate><a10:updated>2014-09-11T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;One of the features that I have never used in C# is the implicit and Explicit keywords. &lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on explicit is "The explicit keyword declares a user-defined type conversion operator that must be invoked with a cast." Omitting the cast will result in a compile time warning.&lt;/p&gt;

&lt;p&gt;The definitive word from MSDN on implicit is "The implicit keyword is used to declare an implicit user-defined type conversion operator." Implicit doesn't require an explicit cast and makes the syntax a lot easier.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{
    public static void Main()
    {

    Email test = "alice@test.com";
    System.Console.WriteLine("Test: " + test);        
    }
}

class Email
    {
        private string user;
        private string domain;
        public Email(string user, string domain)
        {
            this.user = user;
            this.domain = domain;
        }
        static public implicit operator Email(string value)
        {
            var parts = value.Split('@');
            if (parts.Length != 2)
                return null;
            return new Email(parts[0], parts[1]);
        }
        static public implicit operator string(Email value)
        {
            return "User = " + value.user + ", Domain = " + value.domain;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it would quite useful in providing conversion operations from one type to another. The simplest candidate would when you have multiple addresses and you need them in a certain format (read Type) to send it to a shipping agency.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/08/ndepend-review/</guid><link>http://ashutoshraina.github.io/2014/08/ndepend-review/</link><title>NDepend Review</title><description>&lt;p&gt;Patrick from NDepend wasgracious enough to give me a license for NDepend. I have been wanting to get my hands on such a tool for some time now, and as it turns NDepend is actually quite good. Let's have a look at what the hell am I a talking about.
</description><pubDate>Sun, 24 Aug 2014 18:30:00 Z</pubDate><a10:updated>2014-08-24T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Patrick from NDepend wasgracious enough to give me a license for NDepend. I have been wanting to get my hands on such a tool for some time now, and as it turns NDepend is actually quite good. Let's have a look at what the hell am I a talking about.
&lt;!--excerpt--&gt;
&lt;a href="http://www.ndepend.com/" title="NDepend"&gt;NDepend&lt;/a&gt; is a tool which allows you to maintain code quality in a continuous way. I must state &lt;em&gt;continuous&lt;/em&gt; with some degree of importance since that is what drives quality over a sustained period of time. The set up is fairly simple. You can download it and then install the VS plugin or use it as a stand alone tool. Let's go with the VS plugin for now. To ensure that I wasn't just checking out a demo application, I decided to pull down some medium and large open source projects and then run them through the grind.
First, &lt;a href="http://ashutoshraina.github.io/"https://github.com/Sandra/Sandra.Snow"," title="Sandra.Snow"&gt;Snow&lt;/a&gt;(since this blog runs on Snow). The menu offers a way of creating a new NDepend project and attach it to the existing solution. We will attach to just Snow for now(leave out the other for the sake of simplicity).&lt;/p&gt;

&lt;p&gt;Photo Goes here
&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/GettingStarted.png" alt="Getting Started" /&gt;&lt;/p&gt;

&lt;p&gt;Once we are finished analysing the assemblies. We get a summary of the application level metrics like this. This is quite useful, especially once we establish the baseline.&lt;/p&gt;

&lt;p&gt;Application Metrics
&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/ApplicationMetrics.png" alt="Application Metrics" /&gt;&lt;/p&gt;

&lt;p&gt;Now, dow nto serious business. We are told that we are in violation of some rules (we haven't changed the default settings). NDepend comes with a default set of rules which are largely good and move us towards the general pit of happiness. Rules include best practices for OO design, framework usage guidelines and there are even rules on immutability. So, let's see what did we get.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;warning     Avoid public methods not publicly visible 37  methods Visibility
warning     Fields should be declared as private 1 fields  Visibility
warning     Fields that could have a lower visibility 1 fields  Visibility
.....
Many more
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm..these look good. Let's dig deeper.&lt;/p&gt;

&lt;p&gt;The dependency graph is also a nice insight.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/DependencyGraph.png" alt="Dependency Graph" /&gt;&lt;/p&gt;

&lt;p&gt;Snow is a medium sized code base so the analysis is quite good and accurate as well.&lt;/p&gt;

&lt;p&gt;Will I use NDepend ? Probably Yes
I won't run it without configuring the rules according to my taste (naming static fields with s_ is a little bit of an overkill). It is very easy to change these rules so that's not too tough.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/ManagingRules.png" alt="Managing Rules" /&gt;&lt;/p&gt;

&lt;p&gt;I will probably not keep it running all the time, (combined with ReSharper VS becomes a little slow). The dashboard gives you a clean and clear overview of the entire process which is ofcours nice, since you don't have to load the addin into VS.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/NDependDashboard.png" alt="Dashboard" /&gt;&lt;/p&gt;

&lt;p&gt;Also, I don't think it makes much sense to run at every check-in. In your CI process you are better of making this a nightly thing, and view the results in the morning. Watchout for the .gitignore files though, they might need some updating.&lt;/p&gt;

&lt;p&gt;Note : 
The review is entirely my own and not influenced by anyone.&lt;/p&gt;

&lt;p&gt;P.S. Why is everything uppercase by default in the Dashboard Menu ? (I thought the VS fiasco was enough)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/02/learning-chrome-extensions-by-accident/</guid><link>http://ashutoshraina.github.io/2014/02/learning-chrome-extensions-by-accident/</link><title>Learning Chrome Extensions by accident</title><description>&lt;p&gt;So, twitter has revamped their look to be flatter and what not...It looks like apple now. This really means I was annoyed and wanted to get rid of things in the interface I did not like. Ok so how do we do that ? Write a chrome extension and that will be the permanent end of that!!&lt;/p&gt;

</description><pubDate>Tue, 04 Feb 2014 18:30:00 Z</pubDate><a10:updated>2014-02-04T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;So, twitter has revamped their look to be flatter and what not...It looks like apple now. This really means I was annoyed and wanted to get rid of things in the interface I did not like. Ok so how do we do that ? Write a chrome extension and that will be the permanent end of that!!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Get the sample for making a chrome extension from &lt;a href="http://developer.chrome.com/extensions/getstarted.html" title="chrome extension"&gt;here&lt;/a&gt;. There is more to it than what I am going to write about hopefully you will go on and explore it further. Open up the manifest.js and fix the permissions and the icon. I wanted to tweak twitter so asked for that you may want something else. There are other types of permission as well which may include working with an active tab etc..Pick and choose the relevant one. I did not need any styling in the body of the page hence I got rid of that. I ended up needing no body at all so my manifest looked like this eventually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "manifest_version": 2,
  "name": "Twitter Fixer",
  "description": "Fixes twitter styling",
  "version": "1.0",
    "icons": {
    "16": "icon.png"
    },
"permissions": [
  "https://twitter.com/*"
],
"content_scripts": [
    {
      "matches": [
        "https://twitter.com/"
      ],
      "css": [
        "fixtwitter.css"
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The html page was bare bones.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Twitter Fixer&amp;lt;/title&amp;gt;
    &amp;lt;script src="fixtwitter.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what is fixtwitter.css. It is the css which I wanted to apply on top of twitter. I tweaked it in the developer tools and settled on what I thought worked for me. It ended up looking like this. I tried fiddling with the CSS through js but I now know better.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#timeline {
    width:115%;
}
#discover-stories{
    width:115%;
}
.content-main{
    width:115%;
}
.avatar{
    border-radius:'25px';
    width:65px;
    height:65px;
}
.dashboard{
    display:none;
}
.stream-item .content{
margin:inherit;
}
.module{
    display:none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, armed with all the tools(you might want to change your icon). I opened up the extensions in settings and loaded the unpacked extension. The result was this.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/twitter-fixed.png" alt="Fixed Twitter" /&gt;&lt;/p&gt;

&lt;p&gt;Being able to bend and break things is quite cool. Play as much as you can.
I thought about putting it up on chrome extension gallery then saw the $5 charge and dropped the idea.&lt;/p&gt;

&lt;p&gt;P.S. Don't judge me by my CSS skills.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/learning-redis-by-accident/</guid><link>http://ashutoshraina.github.io/2014/01/learning-redis-by-accident/</link><title>Learning Redis by accident</title><description>&lt;p&gt;While exploring the pub-sub mechanism in MongoDB, I came across Redis. Redis has this built in. This gave me the incentive to scratch a long time itch and try redis. Redis is eseentially an in-memory database. It is supposed to be fast (like really fast). So, I thought I would take it for a spin. Considering, I am on windows and it seems like there is no direct support for windows. Windows remains the poor second, but we will let it be for now.
Microsoft provides the executable for 2.6 and we can download it from there.&lt;/p&gt;

</description><pubDate>Sun, 26 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-26T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;While exploring the pub-sub mechanism in MongoDB, I came across Redis. Redis has this built in. This gave me the incentive to scratch a long time itch and try redis. Redis is eseentially an in-memory database. It is supposed to be fast (like really fast). So, I thought I would take it for a spin. Considering, I am on windows and it seems like there is no direct support for windows. Windows remains the poor second, but we will let it be for now.
Microsoft provides the executable for 2.6 and we can download it from there.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Now, how do we talk to redis ? First, as expected there is a CLI which is quite simple and easy. Second, get some packages from nuget and start writing C#. I tried the CLI for an hour or so and then moved on to C#. (CLI is no slouch, you can do a pub-sub there). The things you can do with redis are simple and few. That is not a such a bad thing because it keeps the clutter out. It does a few things and does them really well and really fast.
Now, for talking to redis there are two primary options BookSleeve (by Marc Garvel) and ServiceStack.Redis. I chose the former just for the name(no kidding naming is still a hard problem).&lt;/p&gt;

&lt;p&gt;Let's get to the coding bit.
Open up a connection, insert something and get something back.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RedisConnection connection = new RedisConnection("localhost");
connection.Open();
//0 is the database number, you can set it whatever you want
connection.Strings.Set(0, "foo", "bar");
var bar = connection.Strings.GetString(0, "foo");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, before we move further just for clarity Redis supports the following data structures.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Strings
Hashes
Lists
Sets
Sorted-Sets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The api surface in booksleeve brings the simplicity of redis to the surface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connection.Hashes.Set(0, "duck", new Dictionary&amp;lt;string,byte[]&amp;gt;{ { "quack", Encoding.UTF8.GetBytes("I am a quack") } });
var quack = connection.Hashes.GetString(0, "duck", "quack");
Console.WriteLine(quack.Result);

connection.Lists.AddFirst(0, "baz", "bazz");
var bazz = connection.Lists.GetString(0, "baz", 0);
Console.WriteLine(bazz.Result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another, interesting feature of redis is the ability to expire data. This can be quite handy especially when cache needs to be invalidated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connection.Strings.Set(0, "temp", "aboutToExpire", 4);
var temp = connection.Strings.GetString(0, "temp");
Console.WriteLine(temp.Result);
Thread.Sleep(4000);
temp = connection.Strings.GetString(0, "temp");
Console.WriteLine(string.IsNullOrEmpty(temp.Result));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Publish and subscribe was surprisingly terse.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connection.Publish("topic", "Hello From Pub");

var channel = connection.GetOpenSubscriberChannel();
channel.Subscribe("topic", SubscritionCallback);

private static void SubscritionCallback (string key,byte[] message) {
Console.WriteLine(key);
Console.WriteLine(Encoding.UTF8.GetString((message)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wasn't so hard and can be quite useful in situation where you simply need to hold data and not pay the penalty of going back to a full database again and again. I enjoyed writing about redis, hope you like reading it.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/mongodb-pubsub/</guid><link>http://ashutoshraina.github.io/2014/01/mongodb-pubsub/</link><title>Pub Sub with MongoDB</title><description>&lt;p&gt;In the spirit of trying out new thigns I wanted to create a pub0sub system with mongodb. Usually we would create a pub sub system with a message queue, but since we are a little crazy we will try and do it this way. Turns out it is quite simple. Before we begin we must understand somethings that are available uniquely in MongoDB.
</description><pubDate>Wed, 22 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-22T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;In the spirit of trying out new thigns I wanted to create a pub0sub system with mongodb. Usually we would create a pub sub system with a message queue, but since we are a little crazy we will try and do it this way. Turns out it is quite simple. Before we begin we must understand somethings that are available uniquely in MongoDB.
&lt;!--excerpt--&gt;
First, Capped Collection. Again from the MongodB webstie &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Capped Collections are circular, fixed-size collections that keep documents well-ordered, even without the use of an index. This means that capped collections can receive very high-speed writes and sequential reads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, isn't that what we want ? Fast sequential reads and fast writes within a fixed size. Now, an example of capped collection is the oplog. We already know how to query the oplog &lt;a href="http://ashutoshraina.github.io/2014/01/querying-oplog-mongodb" title="previous post"&gt;previous post&lt;/a&gt; using tailable cursors. Let's get down to it now.&lt;/p&gt;

&lt;p&gt;Modifying my MongoConnectionHandler that we had before to pass in the CollectionOptions for setting up the capped collections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MongoConnectionHandler (string connectionString, string databaseName, CollectionOptionsBuilder options) {
            var client = new MongoClient(connectionString);
            _server = client.GetServer();
            _database = _server.GetDatabase(databaseName);
            var collectionName = typeof(T).Name.ToLower() + "s";
            if ( !_database.CollectionExists(collectionName) &amp;amp;&amp;amp; options != null ) {
                _database.CreateCollection(collectionName, options);
            }
            _collection = _database.GetCollection&amp;lt;T&amp;gt;(typeof(T).Name.ToLower() + "s");
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, setting up the collection with the options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var options = CollectionOptions.SetCapped(true).SetMaxSize(5000).SetMaxDocuments(100);
var connectionHandler = new MongoConnectionHandler&amp;lt;Message&amp;gt;("MongoDBDemo", options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our Message is really simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Message : MongoEntity
{
    public string Topic { get; set; }
    public String Data { get; set; }
    public int Version { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A small helper for generating the messages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;internal static IEnumerable&amp;lt;Message&amp;gt; Generator (string topic) {
            for (int i = 0; i &amp;lt; 100; i++) {
                Thread.Sleep(100);
                yield return new Message{ Topic = topic, Data = "Message " + i, Version = 0 };
            }
        }

    public static void Publish (string topic) {
        var options = CollectionOptions.SetCapped(true).SetMaxSize(5000).SetMaxDocuments(100);
        var connectionHandler = new MongoConnectionHandler&amp;lt;Message&amp;gt;("MongoDBDemo", options);
        var messages = Generator(topic);
        foreach (var message in messages) {
            Console.WriteLine("Publishing message");
            connectionHandler.MongoCollection.Insert(message);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, subscribing isn't that hard with tailable cursors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static void Subscribe (string topic) {
        var connectionHandler = new MongoConnectionHandler&amp;lt;Message&amp;gt;("MongoDBDemo");
        BsonValue lastId = BsonMinKey.Value;
        while (true) {
            var query = Query.EQ("Topic", topic);
            var cursor = connectionHandler.MongoCollection.FindAs&amp;lt;BsonDocument&amp;gt;(query)
                .SetFlags(QueryFlags.TailableCursor | QueryFlags.AwaitData)
                .SetSortOrder(SortBy.Ascending("$natural"));
            var count = 0;
            foreach (var document in cursor) {
                Console.WriteLine("Message Recieved from topic {0} with data {1}",document["Topic"],document["Data"]);
                //Console.WriteLine(document);
                count++;
            }
            if ( count == 0 ) {
                Thread.Sleep(TimeSpan.FromMilliseconds(1000));
            }
        }  
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting all of this in motion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var topic = "mytopic";
Task.Factory.StartNew(t =&amp;gt; Publish(topic), TaskCreationOptions.None);
Task.Factory.StartNew(t =&amp;gt; Subscribe(topic), TaskCreationOptions.None); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It wasn't so hard after all!!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/optimistic-concurrency-mongodb/</guid><link>http://ashutoshraina.github.io/2014/01/optimistic-concurrency-mongodb/</link><title>MongoDb: Optimistic Concurrency</title><description>&lt;p&gt;Optimistic concurrency is one something that most of us need in our applications. What follows is a simple example on how to achieve it in MongoDB.
First, a really simple document.&lt;/p&gt;

&lt;p&gt;Note : This post uses a lot of code that I have shown in previous posts, please look at them if there is any confusion. The principles remain simple and can be used without using the code shown below.&lt;/p&gt;

</description><pubDate>Fri, 17 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-17T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Optimistic concurrency is one something that most of us need in our applications. What follows is a simple example on how to achieve it in MongoDB.
First, a really simple document.&lt;/p&gt;

&lt;p&gt;Note : This post uses a lot of code that I have shown in previous posts, please look at them if there is any confusion. The principles remain simple and can be used without using the code shown below.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;public class Person : MongoEntity {
        public string Name { get; set; }
        public long Version { get ; set ; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, when you want to edit a person it becomes a simple FindAndModify.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool EditPerson (Person person) {
            //find the document with thr same id and version
            var query = Query.And(
                Query&amp;lt;Person&amp;gt;.EQ(_ =&amp;gt; _.Version, person.Version), 
                Query&amp;lt;Person&amp;gt;.EQ(_ =&amp;gt; _.Id, person.Id));

            //bump the version

            var updatedPerson = person;
            updatedPerson.Version = person.Version + 1;
            var result = PersonConnectionHandler.MongoCollection.FindAndModify(query, null, 
                Update.Replace&amp;lt;Person&amp;gt;(updatedPerson), true);

            if ( result.ModifiedDocument != null ) {
                Console.WriteLine("Document Modified successfully");
                Console.WriteLine(result.ModifiedDocument);
                return true;
            } else {
                return false;
            }
        }
&lt;/code&gt;&lt;/pre&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/querying-oplog-mongodb/</guid><link>http://ashutoshraina.github.io/2014/01/querying-oplog-mongodb/</link><title>MongoDb: Querying the OpLog</title><description>&lt;p&gt;Back to MongoDB after some time. OpLog has always been a curious case for me. To know more about it let's start to our detective work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the OpLog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mongodb website gives a rather long definition. I will quote that &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The oplog (operations log) is a special capped collection that keeps a rolling record of all operations that modify the data stored in your databases. MongoDB applies database operations on the primary and then records the operations on the primary’s oplog. The secondary members then copy and apply these operations in an asynchronous process. All replica set members contain a copy of the oplog, allowing them to maintain the current state of the database.&lt;/p&gt;
  
  &lt;p&gt;To facilitate replication, all replica set members send heartbeats (pings) to all other members. Any member can import oplog entries from any other member.
  Whether applied once or multiple times to the target dataset, each operation in the oplog produces the same results, i.e. each operation in the oplog is idempotent. For proper replication operations, entries in the oplog must be idempotent:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;initial sync&lt;/li&gt;
&lt;li&gt;post-rollback catch-up&lt;/li&gt;
&lt;li&gt;sharding chunk migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;</description><pubDate>Thu, 09 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-09T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;Back to MongoDB after some time. OpLog has always been a curious case for me. To know more about it let's start to our detective work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the OpLog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mongodb website gives a rather long definition. I will quote that &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The oplog (operations log) is a special capped collection that keeps a rolling record of all operations that modify the data stored in your databases. MongoDB applies database operations on the primary and then records the operations on the primary’s oplog. The secondary members then copy and apply these operations in an asynchronous process. All replica set members contain a copy of the oplog, allowing them to maintain the current state of the database.&lt;/p&gt;
  
  &lt;p&gt;To facilitate replication, all replica set members send heartbeats (pings) to all other members. Any member can import oplog entries from any other member.
  Whether applied once or multiple times to the target dataset, each operation in the oplog produces the same results, i.e. each operation in the oplog is idempotent. For proper replication operations, entries in the oplog must be idempotent:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;initial sync&lt;/li&gt;
&lt;li&gt;post-rollback catch-up&lt;/li&gt;
&lt;li&gt;sharding chunk migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--excerpt--&gt;
So, the oplog is applicable for a replica set but then do I really need a non-trivial process to start playing with it ? And to your heart's delight the answer is no.
Oplog is not turned on by default when you have a single node in your cluster (of course, who would want that to be way (read me)). OK, let's create a one node replica set then.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mongod.exe --replSet myreplSet --oplogSize 50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a one node repl set with the oplog of 50mb. One liners are always cool !!&lt;/p&gt;

&lt;p&gt;Let's go on our querying streak. Start the monog.exe and let's go to the local database and find our oplog.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rs0:PRIMARY&amp;gt; use local
switched to db local
rs0:PRIMARY&amp;gt; show collections
oplog.rs
startup_log
system.replset
rs0:PRIMARY&amp;gt; db.oplog.rs.findOne();
{
        "ts" : {
                "t" : 1387363823,
                "i" : 1
        },
        "h" : NumberLong(0),
        "v" : 2,
        "op" : "n",
        "ns" : "",
        "o" : {
                "msg" : "initiating set"
        }
}
rs0:PRIMARY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just don't want to query it simply we really do want to get it into our application in real-time. Let's move to the application code now.&lt;/p&gt;

&lt;p&gt;Now, If you look at my previous posts you will recollect that we had a generic version of MongoConnectionHandler. For querying the oplog, I created a non-generic one for this since it makes our lives just a touch easier by not asking us to derive from an IMongoEntity.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MongoConnectionHandler
    {
        public MongoCollection MongoCollection { get; private set; }
        private const string ConnectionString = @"mongodb://localhost";
        public MongoConnectionHandler(string databaseName, string collection)
        {
            var client = new MongoClient(ConnectionString);
            var server = client.GetServer();
            var database = server.GetDatabase(databaseName);
            MongoCollection = database.GetCollection(collection);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can query the oplog quite simply by switching to the local daatbase and reading the &lt;strong&gt;&lt;em&gt;BsonDocument&lt;/em&gt;&lt;/strong&gt; that is returned.&lt;/p&gt;

&lt;p&gt;Note: The orignial version was written in the examples in java and is available on Github as part of examples of the java driver.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class QueryOpLog {
        protected readonly MongoConnectionHandler OpLogHandler;
        public QueryOpLog () {
            OpLogHandler = new MongoConnectionHandler("local", "oplog.rs");
        }
        public IEnumerable&amp;lt;BsonDocument&amp;gt; GetLastEntryInOpLog () {           
            BsonValue lastId = BsonMinKey.Value;
            while (true) {
                var query = Query.GT("ts", lastId);
                var cursor = OpLogHandler.MongoCollection.FindAs&amp;lt;BsonDocument&amp;gt;(query)
                            .SetFlags(QueryFlags.TailableCursor | QueryFlags.AwaitData)
                            .SetSortOrder(SortBy.Ascending("$natural"));
                var count = 0;
                foreach (var document in cursor) {
                    lastId = document["ts"];
                    Console.WriteLine("LastId is {0}", lastId);
                    yield return document;
                    count++;
                }
                if ( count == 0 ) {
                    Thread.Sleep(TimeSpan.FromMilliseconds(100));
                }
            }           
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few things going on here. One, some flags are being set in the query to get a tailable cursor and we are basically querying the oplog only if we have a new document by using a count. &lt;strong&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/strong&gt; makes for a nicer syntax for the consumer of this method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var oplog = new QueryOpLog();
var resut = oplog.GetLastEntryInOpLog();
resut.ForEach(r =&amp;gt; Console.WriteLine(r));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, go on and make some operations through the shell and watch the oplog show up in a console window.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/mvc-on-mono-monodevelop/</guid><link>http://ashutoshraina.github.io/2014/01/mvc-on-mono-monodevelop/</link><title>Up and Running with Asp.net MVC Mono and Monodevelop</title><description>&lt;p&gt;After 3 hours worth of work, I was finally able to run Asp.net MVC4 using monodevelop on mono. I will talk about installaing monodevelop later (that was a painful exercise). So, assuming you have monodevelop installed on windows and latest version of mono installed (mono-3.2.3)as well. Now, go file new solution Asp.net MVC project with razor. Run it and wait for the world to fall apart.&lt;/p&gt;

</description><pubDate>Thu, 02 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-02T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;After 3 hours worth of work, I was finally able to run Asp.net MVC4 using monodevelop on mono. I will talk about installaing monodevelop later (that was a painful exercise). So, assuming you have monodevelop installed on windows and latest version of mono installed (mono-3.2.3)as well. Now, go file new solution Asp.net MVC project with razor. Run it and wait for the world to fall apart.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/mono-mvc-error.png" alt="Mono MVC Error" /&gt;&lt;/p&gt;

&lt;p&gt;Now, here is the long recipe of fixing it one step at a time. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Go to Project Options -&amp;gt; General -&amp;gt; Change the Target Framework to Mono/.net4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the Asp.net MVC Nuget package.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/nuget-install.png" alt="Nuget Install" /&gt;&lt;/p&gt;

&lt;p&gt;Now, compile and go yayy!!
Press F5 and wait for your happiness to go away.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Could not launch web server. Make sure that XSP4 web server is installed".
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don't worry it is installed the mono guys just wanted to have fun by poking us with a stick. Copy the &lt;strong&gt;winhack&lt;/strong&gt; folder from &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Mono-3.2.3\lib\mono\4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Mono-3.2.3\lib\mono\4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was only able to arrive at this hack by looking at the monosoftdebugger source code and a bit of hit and miss. In between I asked around if there was a way to attache IIS Express to monodevelop, I couldn't find anything that was simple and obvious (ended up with a useful IISExpress manager utility, more on that later). If you change the target framework to .net 4 and monitor the application output tab then you will the following and it will make sense as to how I reached winhack folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Loaded assembly: C:\Program Files (x86)\Mono-3.2.3\lib\mono\4.5\winhack\xsp4.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, press F5 again and the misery continues, but thankfully this is something we understand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException
Conflicting versions of ASP.NET Web Pages detected: specified version is "1.0.0.0", but the version in bin is "3.0.0.0". To continue, remove files from the application's bin directory or remove the version specification in web.config.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In project's web.config change the version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;add key="webpages:Version" value="3.0.0.0" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's press F5 again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException
Could not locate Razor Host Factory type: System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the web.config located in the views folder change the version to the appropriate mvc version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Side Note : Better, change the version wherever it needs to be updated.&lt;/p&gt;

&lt;p&gt;Now, Press F5.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/mvc-mono-success.png" alt="Success" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2013/12/tasks-with-timeout-net4.5-contd/</guid><link>http://ashutoshraina.github.io/2013/12/tasks-with-timeout-net4.5-contd/</link><title>Tasks With Timeout On .net 4.5 Contd.</title><description>&lt;p&gt;The previous two posts looked at creating tasks with timeouts on .net4. The code as expected took some heavy lifting to get going. Understanding the extension methods themselves took some time. Today, using .net 4.5 this can be made a lot easier. Can we do better ? Yes we can !!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static Task WithTimeout(this Task task, TimeSpan timeout)
    {
        var delay = task.ContinueWith(t =&amp;gt; { }, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
    public static Task&amp;lt;T&amp;gt; WithTimeout&amp;lt;T&amp;gt;(this Task&amp;lt;T&amp;gt; task, TimeSpan timeout)
    {            
        var delay = task.ContinueWith(t =&amp;gt; t.Result, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</description><pubDate>Sun, 29 Dec 2013 18:30:00 Z</pubDate><a10:updated>2013-12-29T18:30:00Z</a10:updated><a10:content type="html">&lt;p&gt;The previous two posts looked at creating tasks with timeouts on .net4. The code as expected took some heavy lifting to get going. Understanding the extension methods themselves took some time. Today, using .net 4.5 this can be made a lot easier. Can we do better ? Yes we can !!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static Task WithTimeout(this Task task, TimeSpan timeout)
    {
        var delay = task.ContinueWith(t =&amp;gt; { }, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
    public static Task&amp;lt;T&amp;gt; WithTimeout&amp;lt;T&amp;gt;(this Task&amp;lt;T&amp;gt; task, TimeSpan timeout)
    {            
        var delay = task.ContinueWith(t =&amp;gt; t.Result, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;!--excerpt--&gt;
OK, so that really trimmed the code. Usage still remains the same with one difference. The task will now be really cancelled and not faulted which will force us to change the TaskContinuationOptions to NotOnCanceled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{
    private static List&amp;lt;int&amp;gt; Output = new List&amp;lt;int&amp;gt;();
    private static Random _random = new Random();

    public static int LongRunningTask(string message)
    {
        Console.WriteLine(message);
        Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
        //Simulate a long running task
        Thread.Sleep(TimeSpan.FromSeconds(2));
        var number = _random.Next();
        Console.WriteLine("Adding " + number + " From thread  - " + Thread.CurrentThread.ManagedThreadId);
        return number;
    }
    public static void Main(string[] args)
    {
        Console.WriteLine("In Main");
        TimeoutonNet45();
        Console.ReadLine();
    }

    public static void TimeoutonNet45()
    {
        Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
        var tasks = new List&amp;lt;Task&amp;gt;();
        try
        {
            var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task1"),TaskCreationOptions.AttachedToParent)
                                 .WithTimeout(TimeSpan.FromMilliseconds(1000))                
                                 .ContinueWith(t =&amp;gt; Output.Add(t.Result), TaskContinuationOptions.NotOnCanceled);
            var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task2"), TaskCreationOptions.AttachedToParent)
                                 .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
            tasks.Add(t1);
            tasks.Add(t2);
            Task.WaitAll(tasks.ToArray());
        }
        catch (Exception ex)
        {
            Console.WriteLine("There was an exception");
            Console.WriteLine(ex.InnerException.Message);
        }
        Console.WriteLine("Output :");
        Output.ForEach(_ =&amp;gt; Console.WriteLine(_));
    }

    public static void TimeoutOnNet4()
    {
        Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
        var tasks = new List&amp;lt;Task&amp;gt;();
        try
        {
            var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task1"), TaskCreationOptions.AttachedToParent)
                                 .TimeoutAfter(1000)
                                 .ContinueWith(t =&amp;gt; Output.Add(t.Result), TaskContinuationOptions.NotOnFaulted);
            var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task2"), TaskCreationOptions.AttachedToParent)
                                 .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
            var t3 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task3"), TaskCreationOptions.AttachedToParent)
                                 .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
            tasks.Add(t1);
            tasks.Add(t2);
            tasks.Add(t3);
            Task.WaitAll(tasks.ToArray());
        }
        catch (Exception ex)
        {
            Console.WriteLine("There was an exception");
            Console.WriteLine(ex.InnerException.Message);
        }
        Console.WriteLine("Output :");
        Output.ForEach(_ =&amp;gt; Console.WriteLine(_));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will look something like this :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In Main
Managed thread Id 10
Entering task1
Managed thread Id 11
Entering task2
Managed thread Id 12
Adding 856463453 From thread  - 12
Adding 1826416296 From thread  - 11
There was an exception
A task was canceled.
Output :
856463453
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more robust means will always be to check for both faults and cancellation within the continuation. So, this makes creating tasks with timouts a lot easier.&lt;/p&gt;
</a10:content></item></channel></rss>