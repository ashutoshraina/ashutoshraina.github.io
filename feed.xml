<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://ashutoshraina.github.io/feed.xml</link><description /><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/02/learning-chrome-extensions-by-accident/</guid><link>http://ashutoshraina.github.io/2014/02/learning-chrome-extensions-by-accident/</link><title>Learning Chrome Extensions by accident</title><description>&lt;p&gt;So, twitter has revamped their look to be flatter and what not...It looks like apple now. This really means I was annoyed and wanted to get rid of things in the interface I did not like. Ok so how do we do that ? Write a chrome extension and that will be the permanent end of that!!&lt;/p&gt;

</description><pubDate>Tue, 04 Feb 2014 18:30:00 Z</pubDate><a10:updated>2014-02-04T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;So, twitter has revamped their look to be flatter and what not...It looks like apple now. This really means I was annoyed and wanted to get rid of things in the interface I did not like. Ok so how do we do that ? Write a chrome extension and that will be the permanent end of that!!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Get the sample for making a chrome extension from &lt;a href="http://developer.chrome.com/extensions/getstarted.html" title="chrome extension"&gt;here&lt;/a&gt;. There is more to it than what I am going to write about hopefully you will go on and explore it further. Open up the manifest.js and fix the permissions and the icon. I wanted to tweak twitter so asked for that you may want something else. There are other types of permission as well which may include working with an active tab etc..Pick and choose the relevant one. I did not need any styling in the body of the page hence I got rid of that. I ended up needing no body at all so my manifest looked like this eventually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "manifest_version": 2,
  "name": "Twitter Fixer",
  "description": "Fixes twitter styling",
  "version": "1.0",
    "icons": {
    "16": "icon.png"
    },
"permissions": [
  "https://twitter.com/*"
],
"content_scripts": [
    {
      "matches": [
        "https://twitter.com/"
      ],
      "css": [
        "fixtwitter.css"
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The html page was bare bones.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Twitter Fixer&amp;lt;/title&amp;gt;
    &amp;lt;script src="fixtwitter.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what is fixtwitter.css. It is the css which I wanted to apply on top of twitter. I tweaked it in the developer tools and settled on what I thought worked for me. It ended up looking like this. I tried fiddling with the CSS through js but I now know better.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#timeline {
    width:115%;
}
#discover-stories{
    width:115%;
}
.content-main{
    width:115%;
}
.avatar{
    border-radius:'25px';
    width:65px;
    height:65px;
}
.dashboard{
    display:none;
}
.stream-item .content{
margin:inherit;
}
.module{
    display:none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, armed with all the tools(you might want to change your icon). I opened up the extensions in settings and loaded the unpacked extension. The result was this.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/twitter-fixed.png" alt="Fixed Twitter" /&gt;&lt;/p&gt;

&lt;p&gt;Being able to bend and break things is quite cool. Play as much as you can.
I thought about putting it up on chrome extension gallery then saw the $5 charge and dropped the idea.&lt;/p&gt;

&lt;p&gt;P.S. Don't judge me by my CSS skills.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/learning-redis-by-accident/</guid><link>http://ashutoshraina.github.io/2014/01/learning-redis-by-accident/</link><title>Learning Redis by accident</title><description>&lt;p&gt;While exploring the pub-sub mechanism in MongoDB, I came across Redis. Redis has this built in. This gave me the incentive to scratch a long time itch and try redis. Redis is eseentially an in-memory database. It is supposed to be fast (like really fast). So, I thought I would take it for a spin. Considering, I am on windows and it seems like there is no direct support for windows. Windows remains the poor second, but we will let it be for now.
Microsoft provides the executable for 2.6 and we can download it from there.&lt;/p&gt;

</description><pubDate>Sun, 26 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-26T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;While exploring the pub-sub mechanism in MongoDB, I came across Redis. Redis has this built in. This gave me the incentive to scratch a long time itch and try redis. Redis is eseentially an in-memory database. It is supposed to be fast (like really fast). So, I thought I would take it for a spin. Considering, I am on windows and it seems like there is no direct support for windows. Windows remains the poor second, but we will let it be for now.
Microsoft provides the executable for 2.6 and we can download it from there.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Now, how do we talk to redis ? First, as expected there is a CLI which is quite simple and easy. Second, get some packages from nuget and start writing C#. I tried the CLI for an hour or so and then moved on to C#. (CLI is no slouch, you can do a pub-sub there). The things you can do with redis are simple and few. That is not a such a bad thing because it keeps the clutter out. It does a few things and does them really well and really fast.
Now, for talking to redis there are two primary options BookSleeve (by Marc Garvel) and ServiceStack.Redis. I chose the former just for the name(no kidding naming is still a hard problem).&lt;/p&gt;

&lt;p&gt;Let's get to the coding bit.
Open up a connection, insert something and get something back.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RedisConnection connection = new RedisConnection("localhost");
connection.Open();
//0 is the database number, you can set it whatever you want
connection.Strings.Set(0, "foo", "bar");
var bar = connection.Strings.GetString(0, "foo");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, before we move further just for clarity Redis supports the following data structures.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Strings
Hashes
Lists
Sets
Sorted-Sets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The api surface in booksleeve brings the simplicity of redis to the surface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connection.Hashes.Set(0, "duck", new Dictionary&amp;lt;string,byte[]&amp;gt;{ { "quack", Encoding.UTF8.GetBytes("I am a quack") } });
var quack = connection.Hashes.GetString(0, "duck", "quack");
Console.WriteLine(quack.Result);

connection.Lists.AddFirst(0, "baz", "bazz");
var bazz = connection.Lists.GetString(0, "baz", 0);
Console.WriteLine(bazz.Result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another, interesting feature of redis is the ability to expire data. This can be quite handy especially when cache needs to be invalidated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connection.Strings.Set(0, "temp", "aboutToExpire", 4);
var temp = connection.Strings.GetString(0, "temp");
Console.WriteLine(temp.Result);
Thread.Sleep(4000);
temp = connection.Strings.GetString(0, "temp");
Console.WriteLine(string.IsNullOrEmpty(temp.Result));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Publish and subscribe was surprisingly terse.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connection.Publish("topic", "Hello From Pub");

var channel = connection.GetOpenSubscriberChannel();
channel.Subscribe("topic", SubscritionCallback);

private static void SubscritionCallback (string key,byte[] message) {
Console.WriteLine(key);
Console.WriteLine(Encoding.UTF8.GetString((message)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wasn't so hard and can be quite useful in situation where you simply need to hold data and not pay the penalty of going back to a full database again and again. I enjoyed writing about redis, hope you like reading it.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/mongodb-pubsub/</guid><link>http://ashutoshraina.github.io/2014/01/mongodb-pubsub/</link><title>Pub Sub with MongoDB</title><description>&lt;p&gt;In the spirit of trying out new thigns I wanted to create a pub0sub system with mongodb. Usually we would create a pub sub system with a message queue, but since we are a little crazy we will try and do it this way. Turns out it is quite simple. Before we begin we must understand somethings that are available uniquely in MongoDB.
</description><pubDate>Wed, 22 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-22T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;In the spirit of trying out new thigns I wanted to create a pub0sub system with mongodb. Usually we would create a pub sub system with a message queue, but since we are a little crazy we will try and do it this way. Turns out it is quite simple. Before we begin we must understand somethings that are available uniquely in MongoDB.
&lt;!--excerpt--&gt;
First, Capped Collection. Again from the MongodB webstie &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Capped Collections are circular, fixed-size collections that keep documents well-ordered, even without the use of an index. This means that capped collections can receive very high-speed writes and sequential reads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, isn't that what we want ? Fast sequential reads and fast writes within a fixed size. Now, an example of capped collection is the oplog. We already know how to query the oplog &lt;a href="http://ashutoshraina.github.io/2014/01/querying-oplog-mongodb" title="previous post"&gt;previous post&lt;/a&gt; using tailable cursors. Let's get down to it now.&lt;/p&gt;

&lt;p&gt;Modifying my MongoConnectionHandler that we had before to pass in the CollectionOptions for setting up the capped collections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MongoConnectionHandler (string connectionString, string databaseName, CollectionOptionsBuilder options) {
            var client = new MongoClient(connectionString);
            _server = client.GetServer();
            _database = _server.GetDatabase(databaseName);
            var collectionName = typeof(T).Name.ToLower() + "s";
            if ( !_database.CollectionExists(collectionName) &amp;amp;&amp;amp; options != null ) {
                _database.CreateCollection(collectionName, options);
            }
            _collection = _database.GetCollection&amp;lt;T&amp;gt;(typeof(T).Name.ToLower() + "s");
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, setting up the collection with the options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var options = CollectionOptions.SetCapped(true).SetMaxSize(5000).SetMaxDocuments(100);
var connectionHandler = new MongoConnectionHandler&amp;lt;Message&amp;gt;("MongoDBDemo", options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our Message is really simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Message : MongoEntity
{
    public string Topic { get; set; }
    public String Data { get; set; }
    public int Version { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A small helper for generating the messages&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;internal static IEnumerable&amp;lt;Message&amp;gt; Generator (string topic) {
            for (int i = 0; i &amp;lt; 100; i++) {
                Thread.Sleep(100);
                yield return new Message{ Topic = topic, Data = "Message " + i, Version = 0 };
            }
        }

    public static void Publish (string topic) {
        var options = CollectionOptions.SetCapped(true).SetMaxSize(5000).SetMaxDocuments(100);
        var connectionHandler = new MongoConnectionHandler&amp;lt;Message&amp;gt;("MongoDBDemo", options);
        var messages = Generator(topic);
        foreach (var message in messages) {
            Console.WriteLine("Publishing message");
            connectionHandler.MongoCollection.Insert(message);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, subscribing isn't that hard with tailable cursors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static void Subscribe (string topic) {
        var connectionHandler = new MongoConnectionHandler&amp;lt;Message&amp;gt;("MongoDBDemo");
        BsonValue lastId = BsonMinKey.Value;
        while (true) {
            var query = Query.EQ("Topic", topic);
            var cursor = connectionHandler.MongoCollection.FindAs&amp;lt;BsonDocument&amp;gt;(query)
                .SetFlags(QueryFlags.TailableCursor | QueryFlags.AwaitData)
                .SetSortOrder(SortBy.Ascending("$natural"));
            var count = 0;
            foreach (var document in cursor) {
                Console.WriteLine("Message Recieved from topic {0} with data {1}",document["Topic"],document["Data"]);
                //Console.WriteLine(document);
                count++;
            }
            if ( count == 0 ) {
                Thread.Sleep(TimeSpan.FromMilliseconds(1000));
            }
        }  
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting all of this in motion.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var topic = "mytopic";
Task.Factory.StartNew(t =&amp;gt; Publish(topic), TaskCreationOptions.None);
Task.Factory.StartNew(t =&amp;gt; Subscribe(topic), TaskCreationOptions.None); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It wasn't so hard after all!!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/optimistic-concurrency-mongodb/</guid><link>http://ashutoshraina.github.io/2014/01/optimistic-concurrency-mongodb/</link><title>MongoDb: Optimistic Concurrency</title><description>&lt;p&gt;Optimistic concurrency is one something that most of us need in our applications. What follows is a simple example on how to achieve it in MongoDB.
First, a really simple document.&lt;/p&gt;

&lt;p&gt;Note : This post uses a lot of code that I have shown in previous posts, please look at them if there is any confusion. The principles remain simple and can be used without using the code shown below.&lt;/p&gt;

</description><pubDate>Fri, 17 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-17T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;Optimistic concurrency is one something that most of us need in our applications. What follows is a simple example on how to achieve it in MongoDB.
First, a really simple document.&lt;/p&gt;

&lt;p&gt;Note : This post uses a lot of code that I have shown in previous posts, please look at them if there is any confusion. The principles remain simple and can be used without using the code shown below.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;public class Person : MongoEntity {
        public string Name { get; set; }
        public long Version { get ; set ; }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, when you want to edit a person it becomes a simple FindAndModify.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool EditPerson (Person person) {
            //find the document with thr same id and version
            var query = Query.And(
                Query&amp;lt;Person&amp;gt;.EQ(_ =&amp;gt; _.Version, person.Version), 
                Query&amp;lt;Person&amp;gt;.EQ(_ =&amp;gt; _.Id, person.Id));

            //bump the version

            var updatedPerson = person;
            updatedPerson.Version = person.Version + 1;
            var result = PersonConnectionHandler.MongoCollection.FindAndModify(query, null, 
                Update.Replace&amp;lt;Person&amp;gt;(updatedPerson), true);

            if ( result.ModifiedDocument != null ) {
                Console.WriteLine("Document Modified successfully");
                Console.WriteLine(result.ModifiedDocument);
                return true;
            } else {
                return false;
            }
        }
&lt;/code&gt;&lt;/pre&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/querying-oplog-mongodb/</guid><link>http://ashutoshraina.github.io/2014/01/querying-oplog-mongodb/</link><title>MongoDb: Querying the OpLog</title><description>&lt;p&gt;Back to MongoDB after some time. OpLog has always been a curious case for me. To know more about it let's start to our detective work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the OpLog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mongodb website gives a rather long definition. I will quote that &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The oplog (operations log) is a special capped collection that keeps a rolling record of all operations that modify the data stored in your databases. MongoDB applies database operations on the primary and then records the operations on the primary’s oplog. The secondary members then copy and apply these operations in an asynchronous process. All replica set members contain a copy of the oplog, allowing them to maintain the current state of the database.&lt;/p&gt;
  
  &lt;p&gt;To facilitate replication, all replica set members send heartbeats (pings) to all other members. Any member can import oplog entries from any other member.
  Whether applied once or multiple times to the target dataset, each operation in the oplog produces the same results, i.e. each operation in the oplog is idempotent. For proper replication operations, entries in the oplog must be idempotent:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;initial sync&lt;/li&gt;
&lt;li&gt;post-rollback catch-up&lt;/li&gt;
&lt;li&gt;sharding chunk migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;</description><pubDate>Thu, 09 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-09T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;Back to MongoDB after some time. OpLog has always been a curious case for me. To know more about it let's start to our detective work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the OpLog?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mongodb website gives a rather long definition. I will quote that &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The oplog (operations log) is a special capped collection that keeps a rolling record of all operations that modify the data stored in your databases. MongoDB applies database operations on the primary and then records the operations on the primary’s oplog. The secondary members then copy and apply these operations in an asynchronous process. All replica set members contain a copy of the oplog, allowing them to maintain the current state of the database.&lt;/p&gt;
  
  &lt;p&gt;To facilitate replication, all replica set members send heartbeats (pings) to all other members. Any member can import oplog entries from any other member.
  Whether applied once or multiple times to the target dataset, each operation in the oplog produces the same results, i.e. each operation in the oplog is idempotent. For proper replication operations, entries in the oplog must be idempotent:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;initial sync&lt;/li&gt;
&lt;li&gt;post-rollback catch-up&lt;/li&gt;
&lt;li&gt;sharding chunk migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--excerpt--&gt;
So, the oplog is applicable for a replica set but then do I really need a non-trivial process to start playing with it ? And to your heart's delight the answer is no.
Oplog is not turned on by default when you have a single node in your cluster (of course, who would want that to be way (read me)). OK, let's create a one node replica set then.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mongod.exe --replSet myreplSet --oplogSize 50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a one node repl set with the oplog of 50mb. One liners are always cool !!&lt;/p&gt;

&lt;p&gt;Let's go on our querying streak. Start the monog.exe and let's go to the local database and find our oplog.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rs0:PRIMARY&amp;gt; use local
switched to db local
rs0:PRIMARY&amp;gt; show collections
oplog.rs
startup_log
system.replset
rs0:PRIMARY&amp;gt; db.oplog.rs.findOne();
{
        "ts" : {
                "t" : 1387363823,
                "i" : 1
        },
        "h" : NumberLong(0),
        "v" : 2,
        "op" : "n",
        "ns" : "",
        "o" : {
                "msg" : "initiating set"
        }
}
rs0:PRIMARY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just don't want to query it simply we really do want to get it into our application in real-time. Let's move to the application code now.&lt;/p&gt;

&lt;p&gt;Now, If you look at my previous posts you will recollect that we had a generic version of MongoConnectionHandler. For querying the oplog, I created a non-generic one for this since it makes our lives just a touch easier by not asking us to derive from an IMongoEntity.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MongoConnectionHandler
    {
        public MongoCollection MongoCollection { get; private set; }
        private const string ConnectionString = @"mongodb://localhost";
        public MongoConnectionHandler(string databaseName, string collection)
        {
            var client = new MongoClient(ConnectionString);
            var server = client.GetServer();
            var database = server.GetDatabase(databaseName);
            MongoCollection = database.GetCollection(collection);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can query the oplog quite simply by switching to the local daatbase and reading the &lt;strong&gt;&lt;em&gt;BsonDocument&lt;/em&gt;&lt;/strong&gt; that is returned.&lt;/p&gt;

&lt;p&gt;Note: The orignial version was written in the examples in java and is available on Github as part of examples of the java driver.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class QueryOpLog {
        protected readonly MongoConnectionHandler OpLogHandler;
        public QueryOpLog () {
            OpLogHandler = new MongoConnectionHandler("local", "oplog.rs");
        }
        public IEnumerable&amp;lt;BsonDocument&amp;gt; GetLastEntryInOpLog () {           
            BsonValue lastId = BsonMinKey.Value;
            while (true) {
                var query = Query.GT("ts", lastId);
                var cursor = OpLogHandler.MongoCollection.FindAs&amp;lt;BsonDocument&amp;gt;(query)
                            .SetFlags(QueryFlags.TailableCursor | QueryFlags.AwaitData)
                            .SetSortOrder(SortBy.Ascending("$natural"));
                var count = 0;
                foreach (var document in cursor) {
                    lastId = document["ts"];
                    Console.WriteLine("LastId is {0}", lastId);
                    yield return document;
                    count++;
                }
                if ( count == 0 ) {
                    Thread.Sleep(TimeSpan.FromMilliseconds(100));
                }
            }           
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few things going on here. One, some flags are being set in the query to get a tailable cursor and we are basically querying the oplog only if we have a new document by using a count. &lt;strong&gt;&lt;em&gt;yield&lt;/em&gt;&lt;/strong&gt; makes for a nicer syntax for the consumer of this method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var oplog = new QueryOpLog();
var resut = oplog.GetLastEntryInOpLog();
resut.ForEach(r =&amp;gt; Console.WriteLine(r));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, go on and make some operations through the shell and watch the oplog show up in a console window.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2014/01/mvc-on-mono-monodevelop/</guid><link>http://ashutoshraina.github.io/2014/01/mvc-on-mono-monodevelop/</link><title>Up and Running with Asp.net MVC Mono and Monodevelop</title><description>&lt;p&gt;After 3 hours worth of work, I was finally able to run Asp.net MVC4 using monodevelop on mono. I will talk about installaing monodevelop later (that was a painful exercise). So, assuming you have monodevelop installed on windows and latest version of mono installed (mono-3.2.3)as well. Now, go file new solution Asp.net MVC project with razor. Run it and wait for the world to fall apart.&lt;/p&gt;

</description><pubDate>Thu, 02 Jan 2014 18:30:00 Z</pubDate><a10:updated>2014-01-02T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;After 3 hours worth of work, I was finally able to run Asp.net MVC4 using monodevelop on mono. I will talk about installaing monodevelop later (that was a painful exercise). So, assuming you have monodevelop installed on windows and latest version of mono installed (mono-3.2.3)as well. Now, go file new solution Asp.net MVC project with razor. Run it and wait for the world to fall apart.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/mono-mvc-error.png" alt="Mono MVC Error" /&gt;&lt;/p&gt;

&lt;p&gt;Now, here is the long recipe of fixing it one step at a time. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Go to Project Options -&amp;gt; General -&amp;gt; Change the Target Framework to Mono/.net4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the Asp.net MVC Nuget package.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/nuget-install.png" alt="Nuget Install" /&gt;&lt;/p&gt;

&lt;p&gt;Now, compile and go yayy!!
Press F5 and wait for your happiness to go away.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"Could not launch web server. Make sure that XSP4 web server is installed".
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don't worry it is installed the mono guys just wanted to have fun by poking us with a stick. Copy the &lt;strong&gt;winhack&lt;/strong&gt; folder from &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Mono-3.2.3\lib\mono\4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\Mono-3.2.3\lib\mono\4.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was only able to arrive at this hack by looking at the monosoftdebugger source code and a bit of hit and miss. In between I asked around if there was a way to attache IIS Express to monodevelop, I couldn't find anything that was simple and obvious (ended up with a useful IISExpress manager utility, more on that later). If you change the target framework to .net 4 and monitor the application output tab then you will the following and it will make sense as to how I reached winhack folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Loaded assembly: C:\Program Files (x86)\Mono-3.2.3\lib\mono\4.5\winhack\xsp4.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, press F5 again and the misery continues, but thankfully this is something we understand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException
Conflicting versions of ASP.NET Web Pages detected: specified version is "1.0.0.0", but the version in bin is "3.0.0.0". To continue, remove files from the application's bin directory or remove the version specification in web.config.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In project's web.config change the version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;add key="webpages:Version" value="3.0.0.0" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's press F5 again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException
Could not locate Razor Host Factory type: System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the web.config located in the views folder change the version to the appropriate mvc version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;host factoryType="System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Side Note : Better, change the version wherever it needs to be updated.&lt;/p&gt;

&lt;p&gt;Now, Press F5.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/mvc-mono-success.png" alt="Success" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2013/12/tasks-with-timeout-net4.5-contd/</guid><link>http://ashutoshraina.github.io/2013/12/tasks-with-timeout-net4.5-contd/</link><title>Tasks With Timeout On .net 4.5 Contd.</title><description>&lt;p&gt;The previous two posts looked at creating tasks with timeouts on .net4. The code as expected took some heavy lifting to get going. Understanding the extension methods themselves took some time. Today, using .net 4.5 this can be made a lot easier. Can we do better ? Yes we can !!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static Task WithTimeout(this Task task, TimeSpan timeout)
    {
        var delay = task.ContinueWith(t =&amp;gt; { }, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
    public static Task&amp;lt;T&amp;gt; WithTimeout&amp;lt;T&amp;gt;(this Task&amp;lt;T&amp;gt; task, TimeSpan timeout)
    {            
        var delay = task.ContinueWith(t =&amp;gt; t.Result, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</description><pubDate>Sun, 29 Dec 2013 18:30:00 Z</pubDate><a10:updated>2013-12-29T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;The previous two posts looked at creating tasks with timeouts on .net4. The code as expected took some heavy lifting to get going. Understanding the extension methods themselves took some time. Today, using .net 4.5 this can be made a lot easier. Can we do better ? Yes we can !!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public static Task WithTimeout(this Task task, TimeSpan timeout)
    {
        var delay = task.ContinueWith(t =&amp;gt; { }, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
    public static Task&amp;lt;T&amp;gt; WithTimeout&amp;lt;T&amp;gt;(this Task&amp;lt;T&amp;gt; task, TimeSpan timeout)
    {            
        var delay = task.ContinueWith(t =&amp;gt; t.Result, new CancellationTokenSource(timeout).Token);
        return Task.WhenAny(task, delay).Unwrap();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;!--excerpt--&gt;
OK, so that really trimmed the code. Usage still remains the same with one difference. The task will now be really cancelled and not faulted which will force us to change the TaskContinuationOptions to NotOnCanceled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{
    private static List&amp;lt;int&amp;gt; Output = new List&amp;lt;int&amp;gt;();
    private static Random _random = new Random();

    public static int LongRunningTask(string message)
    {
        Console.WriteLine(message);
        Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
        //Simulate a long running task
        Thread.Sleep(TimeSpan.FromSeconds(2));
        var number = _random.Next();
        Console.WriteLine("Adding " + number + " From thread  - " + Thread.CurrentThread.ManagedThreadId);
        return number;
    }
    public static void Main(string[] args)
    {
        Console.WriteLine("In Main");
        TimeoutonNet45();
        Console.ReadLine();
    }

    public static void TimeoutonNet45()
    {
        Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
        var tasks = new List&amp;lt;Task&amp;gt;();
        try
        {
            var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task1"),TaskCreationOptions.AttachedToParent)
                                 .WithTimeout(TimeSpan.FromMilliseconds(1000))                
                                 .ContinueWith(t =&amp;gt; Output.Add(t.Result), TaskContinuationOptions.NotOnCanceled);
            var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task2"), TaskCreationOptions.AttachedToParent)
                                 .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
            tasks.Add(t1);
            tasks.Add(t2);
            Task.WaitAll(tasks.ToArray());
        }
        catch (Exception ex)
        {
            Console.WriteLine("There was an exception");
            Console.WriteLine(ex.InnerException.Message);
        }
        Console.WriteLine("Output :");
        Output.ForEach(_ =&amp;gt; Console.WriteLine(_));
    }

    public static void TimeoutOnNet4()
    {
        Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
        var tasks = new List&amp;lt;Task&amp;gt;();
        try
        {
            var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task1"), TaskCreationOptions.AttachedToParent)
                                 .TimeoutAfter(1000)
                                 .ContinueWith(t =&amp;gt; Output.Add(t.Result), TaskContinuationOptions.NotOnFaulted);
            var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task2"), TaskCreationOptions.AttachedToParent)
                                 .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
            var t3 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task3"), TaskCreationOptions.AttachedToParent)
                                 .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
            tasks.Add(t1);
            tasks.Add(t2);
            tasks.Add(t3);
            Task.WaitAll(tasks.ToArray());
        }
        catch (Exception ex)
        {
            Console.WriteLine("There was an exception");
            Console.WriteLine(ex.InnerException.Message);
        }
        Console.WriteLine("Output :");
        Output.ForEach(_ =&amp;gt; Console.WriteLine(_));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will look something like this :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In Main
Managed thread Id 10
Entering task1
Managed thread Id 11
Entering task2
Managed thread Id 12
Adding 856463453 From thread  - 12
Adding 1826416296 From thread  - 11
There was an exception
A task was canceled.
Output :
856463453
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more robust means will always be to check for both faults and cancellation within the continuation. So, this makes creating tasks with timouts a lot easier.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2013/12/tasks-with-timeout-contd/</guid><link>http://ashutoshraina.github.io/2013/12/tasks-with-timeout-contd/</link><title>Tasks With Timeout Contd.</title><description>&lt;p&gt;As mentioned in the last post we can now have tasks with individual timeouts. The code looked a little heavy. Can we do better ? Yes we can !!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var tasks = new List&amp;lt;Task&amp;gt;();
    try
    {
    //instead of checking for fault within the continutaion, 
    //we can just use a TaskContinuationOption to tell communicate the right semantics

    var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask(),TaskCreationOptions.AttachedToParent)
    .TimeoutAfter(1000)
    .ContinueWith(t =&amp;gt; SomethingUsefulWithTheResult(), 
     TaskContinuationOptions.NotOnFaulted);

    var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask(), TaskCreationOptions.AttachedToParent)
      .ContinueWith(t =&amp;gt; SomethingUsefulWithTheResult());

    var t3 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task3"),
    TaskCreationOptions.AttachedToParent)
      .ContinueWith(t =&amp;gt; SomethingUsefulWithTheResult());

    tasks.Add(t1);
    tasks.Add(t2);
    tasks.Add(t3);

    Task.WaitAll(tasks.ToArray());
    }
    catch (Exception ex)
    {
    Console.WriteLine("There was an exception");
    Console.WriteLine(ex.InnerException.Message);   
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will show in the next post how this wasn't all that better since this leaves a few gaps.&lt;/p&gt;
</description><pubDate>Mon, 23 Dec 2013 18:30:00 Z</pubDate><a10:updated>2013-12-23T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;As mentioned in the last post we can now have tasks with individual timeouts. The code looked a little heavy. Can we do better ? Yes we can !!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var tasks = new List&amp;lt;Task&amp;gt;();
    try
    {
    //instead of checking for fault within the continutaion, 
    //we can just use a TaskContinuationOption to tell communicate the right semantics

    var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask(),TaskCreationOptions.AttachedToParent)
    .TimeoutAfter(1000)
    .ContinueWith(t =&amp;gt; SomethingUsefulWithTheResult(), 
     TaskContinuationOptions.NotOnFaulted);

    var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask(), TaskCreationOptions.AttachedToParent)
      .ContinueWith(t =&amp;gt; SomethingUsefulWithTheResult());

    var t3 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task3"),
    TaskCreationOptions.AttachedToParent)
      .ContinueWith(t =&amp;gt; SomethingUsefulWithTheResult());

    tasks.Add(t1);
    tasks.Add(t2);
    tasks.Add(t3);

    Task.WaitAll(tasks.ToArray());
    }
    catch (Exception ex)
    {
    Console.WriteLine("There was an exception");
    Console.WriteLine(ex.InnerException.Message);   
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will show in the next post how this wasn't all that better since this leaves a few gaps.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2013/12/tasks-with-timeouts/</guid><link>http://ashutoshraina.github.io/2013/12/tasks-with-timeouts/</link><title>Tasks With Timeout</title><description>&lt;p&gt;So the task is to timeout a task. now, I never thought it would take me as long as it did. Turns out it is a really tricky problem problem. I was expecting something within the framework to make life easier, there isn't anything by default but msdn to the rescue 
&lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/11/10/10235834.aspx" title="Tasks With Timeout"&gt;Tasks With Timeouts&lt;/a&gt;&lt;/p&gt;

</description><pubDate>Sun, 22 Dec 2013 18:30:00 Z</pubDate><a10:updated>2013-12-22T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;So the task is to timeout a task. now, I never thought it would take me as long as it did. Turns out it is a really tricky problem problem. I was expecting something within the framework to make life easier, there isn't anything by default but msdn to the rescue 
&lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/11/10/10235834.aspx" title="Tasks With Timeout"&gt;Tasks With Timeouts&lt;/a&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So, the extension method is &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class TaskWithTimeout
{
    internal struct VoidTypeStruct
    { }
    internal static void MarshalTaskResults&amp;lt;TResult&amp;gt;(Task source, TaskCompletionSource&amp;lt;TResult&amp;gt; proxy)
    {
        switch (source.Status)
        {
            case TaskStatus.Faulted:
                proxy.TrySetException(source.Exception);
                break;
            case TaskStatus.Canceled:
                proxy.TrySetCanceled();
                break;
            case TaskStatus.RanToCompletion:
                Task&amp;lt;TResult&amp;gt; castedSource = source as Task&amp;lt;TResult&amp;gt;;
                proxy.TrySetResult(
                    castedSource == null ? default(TResult) : // source is a Task
                        castedSource.Result); // source is a Task&amp;lt;TResult&amp;gt;
                break;
        }
    }

    public static Task TimeoutAfter(this Task task, int millisecondsTimeout)
    {
        // Short-circuit #1: infinite timeout or task already completed
        if (task.IsCompleted || (millisecondsTimeout == Timeout.Infinite))
        {
            // Either the task has already completed or timeout will never occur.
            // No proxy necessary.
            return task;
        }

        // tcs.Task will be returned as a proxy to the caller
        TaskCompletionSource&amp;lt;VoidTypeStruct&amp;gt; tcs = new TaskCompletionSource&amp;lt;VoidTypeStruct&amp;gt;();

        // Short-circuit #2: zero timeout
        if (millisecondsTimeout == 0)
        {
            // We've already timed out.
            tcs.SetException(new TimeoutException());
            return tcs.Task;
        }

        // Set up a timer to complete after the specified timeout period
        Timer timer = new Timer(state =&amp;gt;
        {
            // Recover your state information
            var myTcs = (TaskCompletionSource&amp;lt;VoidTypeStruct&amp;gt;)state;
            // Fault our proxy with a TimeoutException
            myTcs.TrySetException(new TimeoutException());
        }, tcs, millisecondsTimeout, Timeout.Infinite);

        // Wire up the logic for what happens when source task completes
        task.ContinueWith(antecedent =&amp;gt;
                            {
                                timer.Dispose(); // Cancel the timer
                                MarshalTaskResults(antecedent, tcs); // Marshal results to proxy
                            },
                            CancellationToken.None, TaskContinuationOptions.ExecuteSynchronously, TaskScheduler.Default);

        return tcs.Task;
    }

    public static Task&amp;lt;TResult&amp;gt; TimeoutAfter&amp;lt;TResult&amp;gt;(this Task&amp;lt;TResult&amp;gt; task, int millisecondsTimeout)
    {
        // Short-circuit #1: infinite timeout or task already completed
        if (task.IsCompleted || (millisecondsTimeout == Timeout.Infinite))
        {
            // Either the task has already completed or timeout will never occur.
            // No proxy necessary.
            return task;
        }

        // tcs.Task will be returned as a proxy to the caller
        TaskCompletionSource&amp;lt;TResult&amp;gt; tcs = new TaskCompletionSource&amp;lt;TResult&amp;gt;();

        // Short-circuit #2: zero timeout
        if (millisecondsTimeout == 0)
        {
            // We've already timed out.
            tcs.SetException(new TimeoutException());
            return tcs.Task;
        }

        // Set up a timer to complete after the specified timeout period
        Timer timer = new Timer(state =&amp;gt;
                                {
                                    // Recover your state information
                                    var myTcs = (TaskCompletionSource&amp;lt;TResult&amp;gt;)state;
                                    // Fault our proxy with a TimeoutException
                                    myTcs.TrySetException(new TimeoutException());
                                }, tcs, millisecondsTimeout, Timeout.Infinite);

        // Wire up the logic for what happens when source task completes
        task.ContinueWith(antecedent =&amp;gt;
                            {
                                timer.Dispose(); // Cancel the timer
                                MarshalTaskResults(antecedent, tcs); // Marshal results to proxy
                            }, 
                            CancellationToken.None, TaskContinuationOptions.ExecuteSynchronously,TaskScheduler.Default);

        return tcs.Task;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of code for doing this, and the msdn article remains the better source of explanation.&lt;/p&gt;

&lt;p&gt;Now using this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Program
    {
        private static List&amp;lt;int&amp;gt; Output = new List&amp;lt;int&amp;gt;();
        private static Random _random = new Random();

        public static int LongRunningTask(string message)
        {
            Console.WriteLine(message);
            Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
            //Simulate a long running task
            Thread.Sleep(TimeSpan.FromSeconds(2));
            var number = _random.Next();
            Console.WriteLine("Adding " + number + " From thread  - " + Thread.CurrentThread.ManagedThreadId);
            return number;
        }

        public static void Main(string[] args)
        {
            Console.WriteLine("In Main");
            Console.WriteLine("Managed thread Id " + Thread.CurrentThread.ManagedThreadId);
            var cts = new CancellationTokenSource();
            var tasks = new List&amp;lt;Task&amp;gt;();
            try
            {
//In the continuation check for the condition of fault (or something more if you so need) and perform the //continuation
                var t1 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task1"),
                                                    TaskCreationOptions.AttachedToParent)
                                     .TimeoutAfter(1000)
                                     .ContinueWith(antecedent =&amp;gt; {
                        if(!(antecedent.IsCanceled || antecedent.IsFaulted))
                                                         Output.Add(antecedent.Result);
                                }
                                , cts.Token);
                var t2 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task2"),
                                                    TaskCreationOptions.AttachedToParent)
                                     .ContinueWith(_ =&amp;gt; Output.Add(_.Result));
                var t3 = Task.Factory.StartNew(_ =&amp;gt; LongRunningTask("Entering task3"), 
                                                    TaskCreationOptions.AttachedToParent)
                                     .ContinueWith(_ =&amp;gt; Output.Add(_.Result));

                tasks.Add(t1);
                tasks.Add(t2);
                tasks.Add(t3);

                Task.WaitAll(tasks.ToArray());
            }
            catch (Exception ex)
            {                
                Console.WriteLine("There was an exception");
                Console.WriteLine(ex.InnerException.Message);               
            }

            Console.WriteLine("Output :");
            Output.ForEach(_ =&amp;gt; Console.WriteLine(_));

            Console.ReadLine();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part being that the continuation is applied after the timeout and it won't work with the other way around.
The output therefore basically looks like this : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In Main
Managed thread Id 9
Entering task1
Managed thread Id 10
Entering task2
Managed thread Id 11
Entering task3
Managed thread Id 14
Adding 194443354 From thread  - 10
Adding 792426557 From thread  - 11
Adding 230130793 From thread  - 14
Output :
792426557
230130793
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, time I will try and write about some other things on Flirting with Tasks.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://ashutoshraina.github.io/2013/11/mongodb-sharding/</guid><link>http://ashutoshraina.github.io/2013/11/mongodb-sharding/</link><title>MongoDB-Sharding</title><description>&lt;p&gt;&lt;strong&gt;Sharding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mongodb sharding is based on shard key.&lt;/p&gt;

&lt;p&gt;K1 -&amp;gt; k2 on shard1
K2 -&amp;gt; k3 on shard2 etc..&lt;/p&gt;

&lt;p&gt;Each shard is then replicated for higher availability and DR etc..Sharding is therefore range based. Sharding is done per collections basis.Range based sharding helps it do range based queries.&lt;/p&gt;

</description><pubDate>Mon, 04 Nov 2013 18:30:00 Z</pubDate><a10:updated>2013-11-04T18:30:00Z</a10:updated><a10:content type="text">&lt;p&gt;&lt;strong&gt;Sharding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mongodb sharding is based on shard key.&lt;/p&gt;

&lt;p&gt;K1 -&amp;gt; k2 on shard1
K2 -&amp;gt; k3 on shard2 etc..&lt;/p&gt;

&lt;p&gt;Each shard is then replicated for higher availability and DR etc..Sharding is therefore range based. Sharding is done per collections basis.Range based sharding helps it do range based queries.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;All of the documents on a particular shard are known as chunks ~~ 100mb.&lt;/p&gt;

&lt;p&gt;There are two operations that happen in the background in sharding and these are done automatically for us.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Split - splits a range if the range is producing bigger chunks, this is fairly expensive&lt;/li&gt;
&lt;li&gt;Migrate - moves chunks to somewhere else in the cluster, this is somewhat expensive.
&lt;ul&gt;
&lt;li&gt;Between a pair of shards there will not be more than one migration activity.&lt;/li&gt;
&lt;li&gt;We can still read and write from the data when we are migrating. So, it is live.&lt;/li&gt;
&lt;li&gt;"Balancer" decides when to do the balancing. It balances on the number of chunks today.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both of these are done to maintain a balance in the shards w.r.t. the documents.
The metadata about these shards and our system is stored in config servers. These are light weight.
Conceptually these shards are processes and not separate physical machines or virtual machines although they can and most likely will be.&lt;/p&gt;

&lt;p&gt;Mongos gives the client the big picture of the whole setup. Client is therefore insulated from the underlying architecture that is used to implement sharding, replication etc..&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ashutoshraina.github.io/stylesheets/images/posts/sharding.png" alt="Sharding" /&gt;&lt;/p&gt;

&lt;p&gt;End client applications should go through mongos.&lt;/p&gt;

&lt;p&gt;To create a shard connect to mongos&lt;/p&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh.addShard("hostname:port")
sh.enableSharding("dbname")
db.ensureIndex(Key pattern for your shard key)
sh.shardCollection("namespaceforyourCollection",shardkey);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choosing a shard key&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Filed should be involved in most of the queries&lt;/li&gt;
&lt;li&gt;Good cardinality/granularity&lt;/li&gt;
&lt;li&gt;Shard key should not increase monotonically&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item></channel></rss>